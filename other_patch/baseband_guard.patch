diff --git a/drivers/Makefile b/drivers/Makefile
index 6331f1e..b26415a 100644
--- a/drivers/Makefile
+++ b/drivers/Makefile
@@ -123,6 +123,7 @@ obj-$(CONFIG_PTP_1588_CLOCK) += ptp/
 obj-$(CONFIG_PPS)  += pps/
 obj-$(CONFIG_W1)  += w1/
 obj-$(CONFIG_POWER_SUPPLY) += power/
+obj-$(CONFIG_BASEBAND_GUARD) += baseband_guard/
 obj-$(CONFIG_POWER_AVS)  += avs/
 obj-$(CONFIG_HWMON)  += hwmon/
 obj-$(CONFIG_THERMAL)  += thermal/
diff --git a/drivers/baseband_guard/Makefile b/drivers/baseband_guard/Makefile
new file mode 100644
index 0000000..0853535
--- /dev/null
+++ b/drivers/baseband_guard/Makefile
@@ -0,0 +1 @@
+obj-$(CONFIG_BASEBAND_GUARD) := baseband_guard.o
diff --git a/drivers/baseband_guard/baseband_guard.c b/drivers/baseband_guard/baseband_guard.c
new file mode 100644
index 0000000..1234567
--- /dev/null
+++ b/drivers/baseband_guard/baseband_guard.c
@@ -0,0 +1,150 @@
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/fs.h>
+#include <linux/kdev_t.h>
+#include <linux/string.h>
+#include <linux/reboot.h>
+
+static bool guard_enabled = true;
+module_param(guard_enabled, bool, 0644);
+MODULE_PARM_DESC(guard_enabled, "Enable or disable baseband guard");
+
+static bool allow_in_recovery = true;
+module_param(allow_in_recovery, bool, 0644);
+MODULE_PARM_DESC(allow_in_recovery, "Allow writes in recovery mode");
+
+static bool protect_bootimg = true;
+module_param(protect_bootimg, bool, 0644);
+MODULE_PARM_DESC(protect_bootimg, "Protect boot, vendor_boot, and dtbo images");
+
+static const char *protected_partitions[] = {
+    "modem", "modemst1", "modemst2", "fsg", "fsc",
+    "abl", "xbl", "xbl_config", "hyp", "tz",
+    "devinfo", "sec", "persist", "keystore", "frp",
+    "ssd", "uefisecapp", "logfs", "toolsfv",
+    "opporeserve", "oplusreserve", "multiimgoem",
+    "reserve", "cdt", "ddr", "spunvm", "splash",
+    "vbmeta", "vbmeta_system", "vbmeta_vendor",
+    NULL
+};
+
+static const char *boot_partitions[] = {
+    "boot", "vendor_boot", "dtbo", "init_boot",
+    NULL
+};
+
+static bool is_recovery_mode(void)
+{
+    if (reboot_mode == REBOOT_MODE_RECOVERY) {
+        return true;
+    }
+    return false;
+}
+
+static int baseband_guard_bdev_check(struct block_device *bdev)
+{
+    const char **p;
+    char bdev_name[BDEVNAME_SIZE];
+
+    if (!guard_enabled) {
+        return 0;
+    }
+
+    if (allow_in_recovery && is_recovery_mode()) {
+        pr_info("baseband_guard: Write allowed in recovery mode\n");
+        return 0;
+    }
+
+    bdevname(bdev, bdev_name);
+
+    for (p = protected_partitions; *p; ++p) {
+        if (strstr(bdev_name, *p)) {
+            pr_err("baseband_guard: Denying write access to %s\n", bdev_name);
+            return -EPERM;
+        }
+    }
+
+    if (protect_bootimg) {
+        for (p = boot_partitions; *p; ++p) {
+            if (strstr(bdev_name, *p)) {
+                pr_err("baseband_guard: Denying write access to %s\n", bdev_name);
+                return -EPERM;
+            }
+        }
+    }
+
+    return 0;
+}
+
+static int blkdev_open(struct block_device *bdev, fmode_t mode)
+{
+    if (mode & FMODE_WRITE) {
+        return baseband_guard_bdev_check(bdev);
+    }
+    return 0;
+}
+
+static int __init baseband_guard_init(void)
+{
+    pr_info("baseband_guard: Initializing module\n");
+    return 0;
+}
+
+static void __exit baseband_guard_exit(void)
+{
+    pr_info("baseband_guard: Exiting module\n");
+}
+
+static int blkdev_get(struct block_device *bdev, fmode_t mode, void *holder)
+{
+    if (mode & FMODE_WRITE) {
+        return baseband_guard_bdev_check(bdev);
+    }
+    return 0;
+}
+
+static const struct block_device_operations bd_guard_ops = {
+    .open = blkdev_open,
+    .get_block_device = blkdev_get,
+    .owner = THIS_MODULE
+};
+
+static int baseband_guard_probe(struct device *dev)
+{
+    struct block_device *bdev = dev_to_bdev(dev);
+    if (bdev) {
+        bdev->bd_ops = &bd_guard_ops;
+    }
+    return 0;
+}
+
+static struct bus_type block_bus_type = {
+    .name = "block",
+    .probe = baseband_guard_probe,
+};
+
+module_init(baseband_guard_init);
+module_exit(baseband_guard_exit);
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Your Name");
+MODULE_DESCRIPTION("Protect critical partitions from being written to.");
+
