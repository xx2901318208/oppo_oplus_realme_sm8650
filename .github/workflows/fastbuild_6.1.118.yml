name: 加速版构建 6.1.118 欧加真OKI内核

env:
  TZ: Asia/Shanghai
  CPU: 'sm8650'
  FEIL: 'oppo+oplus+realme'
  ANDROID_VERSION: 'android14'
  KERNEL_VERSION: '6.1'
  KERNEL_NAME: 'android14-11-o-g31602dff16cb'
  KERNELSU_VARIANT: 'SukiSU-Ultra'
  KERNELSU_BRANCH: 'susfs-main'

on:
  workflow_dispatch:
  # 取消此处注释代码可开启每日定时编译
#  schedule:
#    - cron: '0 23 * * *'  # UTC时间23点（北京时间次日7点）
    inputs:
      ksu_type:
        description: 'KernelSU分支(SukiSU Ultra/KernelSU Next,默认SukiSU Ultra)'
        required: true
        type: choice
        default: 'sukisu'
        options:
          - 'sukisu'
          - 'ksunext'
      hook_method:
        description: hook模式(大部分情况manual即可，少数需切换sus su模式的场景才需要kprobes钩子)
        required: true
        type: choice
        default: 'manual'
        options:
          - 'manual'
          - 'kprobes'
      kpm_enable:
        description: '是否开启kpm(仅对sukisu生效;可能轻微增加耗电，不需要可关闭)'
        required: true
        type: choice
        default: 'true'
        options:
          - 'true'
          - 'false'
      lz4_enable:
        description: '是否安装 lz4 1.10.0+zstd 1.5.7 补丁及 LZ4KD 补丁(0=均不安装,1=安装lz4&zstd补丁,2=安装lz4kd补丁,3=均安装,默认1)'
        required: true
        type: choice
        default: '3'
        options:
          - '0'
          - '1'
          - '2'
          - '3'
      bbr_enable:
        description: "是否启用bbr算法(优化上行数据,对手机日用无太大意义甚至可能负优化;false关闭,true仅加入算法,default设为默认)"
        required: true
        type: choice
        default: 'true'
        options:
          - 'false'
          - 'true'
          - 'default'
      SCHED_EEVDF:
        description: "是否启用SCHED_EEVDF算法(false关闭,true仅加入算法,default设为默认6.6内核可用)"
        required: true
        type: choice
        default: 'true'
        options:
          - 'false'
          - 'true'
          - 'default'
      better_net:
        description: '是否开启网络功能增强优化配置(优化代理连接,IPV6等功能)'
        required: true
        type: choice
        default: 'true'
        options:
          - 'true'
          - 'false'
      ssg_rekernel_enable:
        description: '是否启用三星SSG IO调度器及Re-Kernel支持(0=均不安装,1=安装SSG IO调度器,2=安装Re-Kernel,3=均安装,默认1)'
        required: true
        type: choice
        default: '3'
        options:
          - '0'
          - '1'
          - '2'
          - '3'
      kernel_suffix:
        description: '内核后缀(留空默认,开头别加连字符,勿加空格等影响指令运行的保留字符)'
        required: false
        type: string
        default: ''

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      ksuver: ${{ steps.ksu_version.outputs.ksuver }}
    steps:
      - name: 安装配置环境依赖
        run: |
          sudo apt-mark hold firefox
          sudo apt-mark hold libc-bin
          sudo apt purge man-db
          sudo rm -rf /var/lib/man-db/auto-update
          sudo apt update
          sudo apt-get install -y --no-install-recommends \
            curl bison flex make binutils git perl gcc python3 \
            python-is-python3 bc libssl-dev libelf-dev \
            bc aria2 zip unzip dos2unix ccache

      - name: 配置ccache目录
        run: |
          echo "CCACHE_DIR=$HOME/.ccache_6.1.118" >> $GITHUB_ENV
          echo "CCACHE_MAXSIZE=3G" >> $GITHUB_ENV
          echo "当前磁盘空间："
          df -h
          echo "当前构建内核版本：6.1.118"
          rm -rf kernel_workspace
          mkdir kernel_workspace

      - name: 载入当前版本内核的 ccache缓存
        uses: actions/cache@v3
        id: ccache-restore
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-new-6.1.118-${{ runner.os }}-main
          restore-keys: |
            ccache-new-6.1.118-${{ runner.os }}-
            ccache-new-6.1.118-
            ccache-new-
      
      - name: 初始化并配置ccache
        run: |
          # 设置ccache环境变量
          export CCACHE_COMPILERCHECK="%compiler% -dumpmachine; %compiler% -dumpversion"
          export CCACHE_NOHASHDIR="true"
          export CCACHE_HARDLINK="true"
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          export CCACHE_MAXSIZE="${{ env.CCACHE_MAXSIZE }}"
          
          # 确保ccache目录存在
          mkdir -p "$CCACHE_DIR"
          
          # 每次运行都重新配置缓存大小
          echo "配置ccache缓存大小为: $CCACHE_MAXSIZE"
          ccache -M "$CCACHE_MAXSIZE"
          ccache -o compression=true
          
          # 显示初始缓存状态
          echo "ccache初始状态:"
          ccache -s
          
          # 如果缓存恢复命中，显示详细信息
          if [ "${{ steps.ccache-restore.outputs.cache-hit }}" == 'true' ]; then
            echo "ccache缓存命中详情:"
            ccache -sv
          fi
      
      - name: 初始化源码仓库及llvm-Clang20工具链
        run: |
          cd kernel_workspace
          echo "正在克隆源码仓库..."
          git clone --depth=1 -b oneplus/sm8650_v_15.0.0_oneplus12_6.1.118 https://github.com/xx2901318208/android_kernel_common_oneplus_sm8650.git common &
          
          echo "正在克隆llvm-Clang20工具链..." &&
          mkdir -p clang20 &&
          aria2c -s16 -x16 -k1M https://github.com/cctv18/oneplus_sm8650_toolchain/releases/download/LLVM-Clang20-r547379/clang-r547379.zip -o clang.zip &&
          unzip -q clang.zip -d clang20 &&
          rm -rf clang.zip &
          
          echo "正在克隆构建工具..." &&
          aria2c -s16 -x16 -k1M https://github.com/cctv18/oneplus_sm8650_toolchain/releases/download/LLVM-Clang20-r547379/build-tools.zip -o build-tools.zip &&
          unzip -q build-tools.zip &&
          rm -rf build-tools.zip &
          
          wait
          echo "所有源码及llvm-Clang20工具链初始化完成！"
          echo "正在去除 ABI 保护 & 去除 dirty 后缀..."
          rm common/android/abi_gki_protected_exports_* || true
          for f in common/scripts/setlocalversion; do
            sed -i 's/ -dirty//g' "$f"
            sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' "$f"
          done
      - name: 添加KernelSU
        id: ksu_version
        run: |
          # 进入内核工作目录
          cd kernel_workspace
          if [[ ${{ github.event.inputs.ksu_type }} == "sukisu" ]]; then
            echo "正在配置SukiSU Ultra..."
            curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/refs/heads/main/kernel/setup.sh" | bash -s susfs-main
            cd ./KernelSU
            # 获取当前 Git 提交的短哈希 (8位)
            GIT_COMMIT_HASH=$(git rev-parse --short=8 HEAD)
            echo "当前提交哈希: $GIT_COMMIT_HASH"
            export KSU_VERSION=$KSU_VERSION
            # 尝试最多 3 次获取 KernelSU API 版本号
            for i in {1..3}; do
              # 从远程 Makefile 中提取 KSU_API_VERSION
              KSU_API_VERSION=$(curl -s "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/susfs-main/kernel/Makefile" | 
                # 查找第一个包含版本定义的行
                grep -m1 "KSU_VERSION_API :=" | 
                # 提取等号后的值
                awk -F'= ' '{print $2}' | 
                # 删除所有空白字符
                tr -d '[:space:]')
              # 如果成功获取到版本号则跳出循环，否则等待 1 秒后重试
              [ -n "$KSU_API_VERSION" ] && break || sleep 1
            done
            # 如果获取失败，使用默认版本号 3.1.7
            [ -z "$KSU_API_VERSION" ] && KSU_API_VERSION="3.1.7"
            # 将 API 版本号存储到 GitHub 环境变量
            echo "KSU_API_VERSION=$KSU_API_VERSION" >> $GITHUB_ENV
            # 创建版本定义模板&版本格式函数: 使用获取的提交哈希和固定后缀
            # KSU_VERSION_API: API 版本定义
            # KSU_VERSION_FULL: 完整版本定义
            VERSION_DEFINITIONS=$'define get_ksu_version_full\nv\\$1-'"$GIT_COMMIT_HASH"$'@Coolapk_1263599071\nendef\n\nKSU_VERSION_API := '"$KSU_API_VERSION"$'\nKSU_VERSION_FULL := v'"$KSU_API_VERSION"$'-'"$GIT_COMMIT_HASH"$'Coolapk_R1263599071'
            # 清理内核 Makefile 中的旧版本定义
            # 删除版本函数
            sed -i '/define get_ksu_version_full/,/endef/d' kernel/Makefile
            # 删除 API 版本定义
            sed -i '/KSU_VERSION_API :=/d' kernel/Makefile
            # 删除完整版本定义
            sed -i '/KSU_VERSION_FULL :=/d' kernel/Makefile
            # 在 REPO_OWNER 行后插入新版本定义
            awk -v def="$VERSION_DEFINITIONS" '
              # 当找到 REPO_OWNER 行时，插入版本定义并设置标记
              /REPO_OWNER :=/ {print; print def; inserted=1; next}
              # 打印所有行
              1
              # 如果未找到插入点，在文件末尾追加
              END {if (!inserted) print def}
            ' kernel/Makefile > kernel/Makefile.tmp && mv kernel/Makefile.tmp kernel/Makefile

            # 生成自定义版本号（基于提交计数）, 失败时使用 114514
            KSU_VERSION=$(expr $(git rev-list --count main) + 10700 2>/dev/null || echo 114514)
            # 存储版本号到 GitHub 环境变量
            echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
            echo "ksuver=$KSU_VERSION" >> $GITHUB_OUTPUT

            # 验证修改结果
            grep -A10 "REPO_OWNER" kernel/Makefile  # 检查插入点后的内容
            grep "KSU_VERSION_FULL" kernel/Makefile # 确认版本定义存在
            echo "SukiSU版本号: v${KSU_API_VERSION}-${GIT_COMMIT_HASH}@Coolapk R1263599071"
          else
            echo "正在配置KernelSU Next..."
            curl -LSs "https://raw.githubusercontent.com/pershoot/KernelSU-Next/next-susfs/kernel/setup.sh" | bash -s next-susfs
            cd KernelSU-Next
            KSU_VERSION=$(expr $(curl -sI "https://api.github.com/repos/pershoot/KernelSU-Next/commits?sha=next&per_page=1" | grep -i "link:" | sed -n 's/.*page=\([0-9]*\)>; rel="last".*/\1/p') "+" 10200)
            echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
            echo "ksuver=$KSU_VERSION" >> $GITHUB_OUTPUT
            sed -i "s/DKSU_VERSION=11998/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile
          fi

      - name: 应用 KernelSU & SUSFS 补丁
        run: |
          cd kernel_workspace
          if [[ ${{ github.event.inputs.ksu_type }} == "sukisu" ]]; then
            echo "正在添加SukiSU Ultra补丁..."
            git clone https://github.com/ShirkNeko/susfs4ksu.git -b gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}
            git clone https://github.com/ShirkNeko/SukiSU_patch.git
            cp ./susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch ./common/
            cp ./susfs4ksu/kernel_patches/fs/* ./common/fs/
            cp ./susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
            cp ./SukiSU_patch/hooks/syscall_hooks.patch ./common/
            cp ./SukiSU_patch/69_hide_stuff.patch ./common/
            cd ./common
            patch -p1 < 50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch || true
            patch -p1 < syscall_hooks.patch || true
            patch -p1 < 69_hide_stuff.patch || true
          else
            echo "正在添加KernelSU Next补丁..."
            git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}
            git clone https://github.com/WildKernels/kernel_patches.git
            cp ./susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch ./common/
            cp ./susfs4ksu/kernel_patches/fs/* ./common/fs/
            cp ./susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
            cp ./kernel_patches/next/scope_min_manual_hooks_v1.4.patch ./common/
            cp ./kernel_patches/69_hide_stuff.patch ./common/
            cd ./common
            patch -p1 < 50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch || true
            patch -p1 -N -F 3 < scope_min_manual_hooks_v1.4.patch || true
            patch -p1 -N -F 3 < 69_hide_stuff.patch || true
          fi
      - name: 应用lz4 1.10.0 & zstd 1.5.7补丁
        run: |
          if [[ "${{ github.event.inputs.lz4_enable }}" == "1" || "${{ github.event.inputs.lz4_enable }}" == "3" ]]; then
            echo "正在添加lz4 1.10.0 & zstd 1.5.7补丁…"
            cd kernel_workspace
            git clone https://github.com/cctv18/oppo_oplus_realme_sm8650.git
            cp ./oppo_oplus_realme_sm8650/zram_patch/001-lz4.patch ./common/
            cp ./oppo_oplus_realme_sm8650/zram_patch/lz4armv8.S ./common/lib
            cp ./oppo_oplus_realme_sm8650/zram_patch/002-zstd.patch ./common/
            cd ./common
            git apply -p1 < 001-lz4.patch || true
            patch -p1 < 002-zstd.patch || true
          fi

      - name: 应用 lz4kd 补丁
        run: |
          if [[ "${{ github.event.inputs.lz4_enable }}" == "2" || "${{ github.event.inputs.lz4_enable }}" == "3" ]]; then
            echo "正在添加lz4kd补丁…"
            cd kernel_workspace
            if [[ ${{ github.event.inputs.ksu_type }} == "ksunext" ]]; then
              git clone https://github.com/ShirkNeko/SukiSU_patch.git
            fi
            cd common
            cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./include/linux/
            cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./lib
            cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./crypto
            cp ../SukiSU_patch/other/zram/zram_patch/${{ env.KERNEL_VERSION }}/lz4kd.patch ./
            patch -p1 -F 3 < lz4kd.patch || true
          fi
          
      - name: 添加 KSU & SUSFS 配置项
        run: |
          cd kernel_workspace
          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
          if [[ ${{ github.event.inputs.kpm_enable }} == 'true' && ${{ github.event.inputs.ksu_type }} == "sukisu" ]]; then
            echo "CONFIG_KPM=y" >> ./common/arch/arm64/configs/gki_defconfig
          fi
          if [ "${{ github.event.inputs.hook_method }}" == "kprobes" ]; then
            echo "正在开启kprobes钩子..."
            echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_MANUAL_HOOK=n" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_KPROBES_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig
          else
            echo "正在开启manual钩子..."
            echo "CONFIG_KSU_MANUAL_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
          fi
          echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS_AUTO_KSTAT_SUPPORT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
          if [[ "${{ github.event.inputs.lz4_enable }}" == "2" || "${{ github.event.inputs.lz4_enable }}" == "3" ]]; then
            echo "CONFIG_ZSMALLOC=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_CRYPTO_LZ4HC=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_CRYPTO_LZ4K=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_CRYPTO_LZ4KD=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_CRYPTO_842=y" >> ./common/arch/arm64/configs/gki_defconfig
          fi
          # 开启O2编译优化配置
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y" >> ./common/arch/arm64/configs/gki_defconfig
          # 添加 Baseband Guard 配置
          echo "CONFIG_BASEBAND_GUARD=y" >> ./common/arch/arm64/configs/gki_defconfig
          #禁用 defconfig 检查           
          cd common
          wget https://github.com/cctv18/oppo_oplus_realme_sm8650/raw/refs/heads/main/other_patch/config.patch
          patch -p1 -F 3 < config.patch || true
      - name: 启用网络功能增强优化配置
        run: |
          cd kernel_workspace
          if [[ "${{ github.event.inputs.better_net }}" == "true" ]]; then
            #启用  BPF 流解析器,实现高性能网络流量处理,增强网络监控和分析能力
            echo "CONFIG_BPF_STREAM_PARSER=y" >> ./common/arch/arm64/configs/gki_defconfig
            #开启增强 Netfilter 防火墙扩展模块,支持基于地址类型的匹配规则,启用 IP 集合支持,提高防火墙规则灵活性,支持更复杂的流量过滤策略
            echo "CONFIG_NETFILTER_XT_MATCH_ADDRTYPE=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_NETFILTER_XT_SET=y" >> ./common/arch/arm64/configs/gki_defconfig
            #启用 IP 集框架及其多种数据结构实现,提供高效的大规模 IP 地址管理,提高防火墙规则处理效率,减少内存占用
            echo "CONFIG_IP_SET=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_MAX=65534" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_BITMAP_IP=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_BITMAP_IPMAC=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_BITMAP_PORT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_IP=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_IPMARK=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_IPPORT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_IPPORTIP=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_IPPORTNET=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_IPMAC=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_MAC=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_NETPORTNET=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_NET=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_NETNET=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_NETPORT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_NETIFACE=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_LIST_SET=y" >> ./common/arch/arm64/configs/gki_defconfig
            #启用 IPv6 网络地址转换
            echo "CONFIG_IP6_NF_NAT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP6_NF_TARGET_MASQUERADE=y" >> ./common/arch/arm64/configs/gki_defconfig
          fi
           # Add tethering config settings 
           echo "CONFIG_IP_NF_TARGET_TTL=y" >> ./common/arch/arm64/configs/gki_defconfig
           echo "CONFIG_IP6_NF_TARGET_HL=y" >> ./common/arch/arm64/configs/gki_defconfig
           echo "CONFIG_IP6_NF_MATCH_HL=y" >> ./common/arch/arm64/configs/gki_defconfig
           # 添加基带保护相关配置项
           echo "CONFIG_BASEBAND_GUARD=y" >> ./common/arch/arm64/configs/gki_defconfig
           # ECN配置
           echo "CONFIG_IP_NF_TARGET_ECN=y" >> ./common/arch/arm64/configs/gki_defconfig
           echo "CONFIG_IP_ECN=y" >> ./common/arch/arm64/configs/gki_defconfig
           echo "CONFIG_TCP_ECN=y" >> ./common/arch/arm64/configs/gki_defconfig
           echo "CONFIG_IPV6_ECN=y" >> ./common/arch/arm64/configs/gki_defconfig
           # Add tmpfs config setting
           echo "CONFIG_TMPFS_XATTR=y" >> ./common/arch/arm64/configs/gki_defconfig
           echo "CONFIG_TMPFS_POSIX_ACL=y" >> ./common/arch/arm64/configs/gki_defconfig
           # Add rcu config setting
           echo "CONFIG_RCU_TRACE=n" >> ./common/arch/arm64/configs/gki_defconfig
           # 120Hz动态刷新率配置       
           echo "CONFIG_DRM_MSM_DSI_120HZ=y" >> ./common/arch/arm64/configs/gki_defconfig
           echo "CONFIG_QCOM_KGSL_120HZ_GPU_FREQ=y" >> ./common/arch/arm64/configs/gki_defconfig
           echo "CONFIG_QCOM_KGSL_DYNAMIC_FPS=y" >> ./common/arch/arm64/configs/gki_defconfig
           # SELinux 安全增强 设备能耗管理                
           echo "CONFIG_SECURITY_SELINUX_BOOTPARAM=y" >> ./common/arch/arm64/configs/gki_defconfig
           echo "CONFIG_SECURITY_SELINUX_DEVELOP=y" >> ./common/arch/arm64/configs/gki_defconfig
           echo "CONFIG_SECURITY_SELINUX_AVC_STATS=y" >> ./common/arch/arm64/configs/gki_defconfig
           echo "CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE=0" >> ./common/arch/arm64/configs/gki_defconfig
           echo "CONFIG_SECURITY_SELINUX_SIDTAB_HASH_BITS=9" >> ./common/arch/arm64/configs/gki_defconfig
           echo "CONFIG_SECURITY_SELINUX_SID2STR_CACHE_SIZE=256" >> ./common/arch/arm64/configs/gki_defconfig
           echo "CONFIG_ARM_PSCI=y" >> ./common/arch/arm64/configs/gki_defconfig
           echo "CONFIG_ARM_PSCI_FW=y" >> ./common/arch/arm64/configs/gki_defconfig
           echo "CONFIG_ARM_SCPI_PROTOCOL=y" >> ./common/arch/arm64/configs/gki_defconfig
           echo "CONFIG_ARM_SCPI_POWER_DOMAIN=y" >> ./common/arch/arm64/configs/gki_defconfig
           echo "CONFIG_DEVTMPFS=y" >> ./common/arch/arm64/configs/gki_defconfig
           echo "CONFIG_DEVTMPFS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
           echo "CONFIG_DEVTMPFS_SAFE=y" >> ./common/arch/arm64/configs/gki_defconfig
           echo "CONFIG_ION=y" >> ./common/arch/arm64/configs/gki_defconfig
           echo "CONFIG_ION_SYSTEM_HEAP=y" >> ./common/arch/arm64/configs/gki_defconfig
           echo "CONFIG_ION_CARVEOUT_HEAP=y" >> ./common/arch/arm64/configs/gki_defconfig
           echo "CONFIG_ION_CHUNK_HEAP=y" >> ./common/arch/arm64/configs/gki_defconfig
           echo "CONFIG_ION_CMA_HEAP=y" >> ./common/arch/arm64/configs/gki_defconfig
           # ===== 用户态算法接口 =====
           echo "CONFIG_CRYPTO_USER_API_HASH=y" >> ./common/arch/arm64/configs/gki_defconfig
           echo "CONFIG_CRYPTO_USER_API_SKCIPHER=y" >> ./common/arch/arm64/configs/gki_defconfig
           echo "CONFIG_CRYPTO_USER_API_AEAD=y" >> ./common/arch/arm64/configs/gki_defconfig
           echo "CONFIG_CRYPTO_USER_API_RNG=y" >> ./common/arch/arm64/configs/gki_defconfig
          # ===== 国密 & ECDSA =====
           echo "CONFIG_CRYPTO_ECDSA=y" >> ./common/arch/arm64/configs/gki_defconfig
           echo "CONFIG_CRYPTO_SM2=y" >> ./common/arch/arm64/configs/gki_defconfig
           echo "CONFIG_CRYPTO_SM3_GENERIC=y" >> ./common/arch/arm64/configs/gki_defconfig
           echo "CONFIG_CRYPTO_SM4_ARM64_CE=y" >> ./common/arch/arm64/configs/gki_defconfig
           echo "CONFIG_CRYPTO_SM4_ARM64_CE_BLK=y" >> ./common/arch/arm64/configs/gki_defconfig
           echo "CONFIG_CRYPTO_SM4_ARM64_NEON_BLK=y" >> ./common/arch/arm64/configs/gki_defconfig
           # ===== TEE / TrustZone / OP-TEE =====
           echo "CONFIG_TEE=y" >> ./common/arch/arm64/configs/gki_defconfig
           echo "CONFIG_OPTEE=y" >> ./common/arch/arm64/configs/gki_defconfig
           echo "CONFIG_OPTEE_BENCHMARK=y" >> ./common/arch/arm64/configs/gki_defconfig
           echo "CONFIG_OPTEE_APDU=y" >> ./common/arch/arm64/configs/gki_defconfig
           echo "CONFIG_QCOM_QSEECOM=y" >> ./common/arch/arm64/configs/gki_defconfig
           echo "CONFIG_ARM_TRUSTZONE=y" >> ./common/arch/arm64/configs/gki_defconfig                 
           # ===== 硬件安全引擎=====
           echo "CONFIG_CRYPTO_DEV_QCOM_RNG=y" >> ./common/arch/arm64/configs/gki_defconfig
           # 确保加密加速器正确
           sed -i 's/CONFIG_CRYPTO_AES_ARM64_CE=.*/CONFIG_CRYPTO_AES_ARM64_CE=y/' ./common/arch/arm64/configs/gki_defconfig
           sed -i 's/CONFIG_CRYPTO_SHA2_ARM64_CE=.*/CONFIG_CRYPTO_SHA2_ARM64_CE=y/' ./common/arch/arm64/configs/gki_defconfig
           sed -i 's/CONFIG_CRYPTO_SHA512_ARM64_CE=.*/CONFIG_CRYPTO_SHA512_ARM64_CE=y/' ./common/arch/arm64/configs/gki_defconfig
           sed -i 's/CONFIG_CRYPTO_POLYVAL_ARM64_CE=.*/CONFIG_CRYPTO_POLYVAL_ARM64_CE=y/' ./common/arch/arm64/configs/gki_defconfig
           sed -i 's/CONFIG_CRYPTO_AES_ARM64_CE_BLK=.*/CONFIG_CRYPTO_AES_ARM64_CE_BLK=y/' ./common/arch/arm64/configs/gki_defconfig
           sed -i 's/CONFIG_CRYPTO_CHACHA20POLY1305=.*/CONFIG_CRYPTO_CHACHA20POLY1305=y/' ./common/arch/arm64/configs/gki_defconfig
      - name: 添加 BBR 等一系列拥塞控制算法
        run: |
          if [[ "${{ github.event.inputs.bbr_enable }}" == "true" || "${{ github.event.inputs.bbr_enable }}" == "default" ]]; then
            echo "正在添加BBR等拥塞控制算法..."
            cd kernel_workspace
            #开启TCP拥塞控制算法控制器（必需）
            echo "CONFIG_TCP_CONG_ADVANCED=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_BBR=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_CUBIC=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_VEGAS=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_NV=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_WESTWOOD=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_HTCP=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_TCP_CONG_BRUTAL=y" >> ./common/arch/arm64/configs/gki_defconfig
            # 添加 FQ_CODEL 相关配置项
            echo "CONFIG_NET_SCH_FQ_CODEL=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_DEFAULT_NET_SCH=fq_codel" >> ./common/arch/arm64/configs/gki_defconfig
            if [[ "${{ github.event.inputs.bbr_enable }}" == "default" ]]; then
              echo "正在将BBR设为默认拥塞控制算法..."
              echo "CONFIG_DEFAULT_TCP_CONG=bbr" >> ./common/arch/arm64/configs/gki_defconfig
            else
              echo "CONFIG_DEFAULT_TCP_CONG=cubic" >> ./common/arch/arm64/configs/gki_defconfig
            fi
          fi
      - name: 启用三星SSG IO调度器
        run: |
          if [[ "${{ github.event.inputs.ssg_rekernel_enable }}" == "1" || "${{ github.event.inputs.ssg_rekernel_enable }}" == "3" ]]; then
            echo "正在启用三星SSG IO调度器(一加12等极少数机型开启后可能不开机,若出现bug请关闭此项)…"
            cd kernel_workspace
            echo "CONFIG_MQ_IOSCHED_SSG=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_MQ_IOSCHED_SSG_CGROUP=y" >> ./common/arch/arm64/configs/gki_defconfig
          fi

      - name: 启用Re-Kernel支持
        run: |
          if [[ "${{ github.event.inputs.ssg_rekernel_enable }}" == "2" || "${{ github.event.inputs.ssg_rekernel_enable }}" == "3" ]]; then
            echo "正在启用Re-Kernel支持(用于与Freezer,NoActive等软件配合使用,提升冻结后台能力)…"
            cd kernel_workspace
            echo "CONFIG_REKERNEL=y" >> ./common/arch/arm64/configs/gki_defconfig
          fi
      - name: 启用 EEVDF 调度器
        run: |
          if [[ "${{ github.event.inputs.SCHED_EEVDF_enable }}" == "true" ]]; then
            echo "正在启用EEVDF支持"
            cd kernel_workspace
            echo "CONFIG_SCHED_EEVDF=y" >> ./common/arch/arm64/configs/gki_defconfig
          fi

      - name: 添加制作名称
        run: |
          cd kernel_workspace
          echo "替换内核版本后缀..."
          if [[ -n "${{ github.event.inputs.kernel_suffix }}" ]]; then
            echo "当前内核版本后缀：${{ github.event.inputs.kernel_suffix }}"
            for f in ./common/scripts/setlocalversion; do
              sed -i "\$s|echo \"\\\$res\"|echo \"-${{ github.event.inputs.kernel_suffix }}\"|" "$f"
            done
          else
            echo "当前内核版本后缀：${{ env.KERNEL_NAME }}"
            for f in ./common/scripts/setlocalversion; do
              sed -i "\$s|echo \"\\\$res\"|echo \"-${{ env.KERNEL_NAME }}\"|" "$f"
            done
          fi
      - name: 强制覆盖并修复 Baseband Guard
        run: |
          cd kernel_workspace/common

          echo "正在强制重写 baseband_guard.c..."
          cat > drivers/baseband_guard/baseband_guard.c <<'EOF'
          // SPDX-License-Identifier: GPL-2.0
          /*
           * Baseband Guard - Advanced Partition Protection
           *
           * This module uses LSM hooks to provide robust, non-bypassable write protection
           * for critical partitions. It combines this with a sysfs interface for status
           * monitoring and module parameters for runtime control.
           *
           * Author: xx2901318208 (Concept) & Manus (Refinement & Implementation)
           */

          #include <linux/module.h>
          #include <linux/kernel.h>
          #include <linux/init.h>
          #include <linux/lsm_hooks.h>
          #include <linux/fs.h>
          #include <linux/string.h>
          #include <linux/blkdev.h>
          #include <linux/kobject.h>
          #include <linux/sysfs.h>
          #include <linux/backing-dev.h>
          #include "../block/genhd.h"

          /* ================== 模块参数 (可运行时调整) ================== */

          static bool guard_enabled = true;
          module_param(guard_enabled, bool, 0644);
          MODULE_PARM_DESC(guard_enabled, "Enable or disable baseband guard (1=on, 0=off)");

          static bool allow_in_recovery = true;
          module_param(allow_in_recovery, bool, 0644);
          MODULE_PARM_DESC(allow_in_recovery, "Allow all writes when in recovery mode (1=on, 0=off)");

          static bool protect_boot_partitions = true;
          module_param(protect_boot_partitions, bool, 0644);
          MODULE_PARM_DESC(protect_boot_partitions, "Also protect boot, vendor_boot, and dtbo (1=on, 0=off)");


          /* ================== 受保护的分区列表 ================== */

          // 核心系统、数据、基带、启动链和关键信息分区
          static const char *protected_partitions[] = {
              // Android 系统核心分区
              "system", "system_ext", "vendor", "product", "odm", "data",

              // 核心基带和串号分区
              "modem", "modemst1", "modemst2", "fsg", "fsc",

              // 引导加载程序分区链
              "abl", "xbl", "xbl_config", "hyp", "tz",

              // 其他关键数据和元数据分区
              "devinfo", "sec", "persist", "keystore", "frp",
              "ssd", "uefisecapp", "logfs", "toolsfv",
              "opporeserve", "oplusreserve", "multiimgoem",
              "reserve", "cdt", "ddr", "spunvm", "splash",
              "vbmeta", "vbmeta_system", "vbmeta_vendor",
              NULL
          };

          // 内核和设备树分区
          static const char *boot_partitions[] = {
              "boot", "vendor_boot", "dtbo", "init_boot",
              NULL
          };


          /* ================== 核心保护逻辑 (LSM钩子) ================== */

          // 内核导出的命令行变量，用于判断运行模式
          extern char *saved_command_line;

          // 判断是否为恢复模式 (Recovery Mode)
          static bool is_recovery_mode(void)
          {
              // 检查内核启动参数中是否包含 "recovery" 或 "androidboot.mode=recovery"
              if (saved_command_line && 
                  (strstr(saved_command_line, "androidboot.mode=recovery") || strstr(saved_command_line, "recovery=true"))) {
                  return true;
              }
              return false;
          }

          /**
           * @brief 检查块设备权限的核心函数
           */
          static int check_partition_permission(struct block_device *bdev)
          {
              const char **p;
              char bdev_name[BDEVNAME_SIZE];

              if (!bdev || !bdev->bd_disk)
                  return 0;
              
              // 使用 bdev->bd_disk->disk_name 获取分区名
              strlcpy(bdev_name, bdev->bd_disk->disk_name, BDEVNAME_SIZE);

              // 检查是否匹配核心保护列表
              for (p = protected_partitions; *p; ++p) {
                  // 使用 strcmp 进行精确匹配，避免 "boot" 匹配到 "vendor_boot" 的问题
                  if (strcmp(bdev_name, *p) == 0) {
                      pr_err("baseband_guard: DENIED write access to critical partition '%s'\n", bdev_name);
                      return -EPERM;
                  }
              }

              // 如果开启了boot分区保护，则检查boot相关分区
              if (protect_boot_partitions) {
                  for (p = boot_partitions; *p; ++p) {
                      if (strcmp(bdev_name, *p) == 0) {
                          pr_err("baseband_guard: DENIED write access to boot partition '%s'\n", bdev_name);
                          return -EPERM;
                      }
                  }
              }

              return 0;
          }

          /**
           * @brief LSM钩子函数: 在访问 inode 时进行权限检查
           *
           * 这是保护机制的核心，每次对文件/设备的访问尝试都会触发此函数。
           * @return 0 表示允许, -EPERM 表示拒绝。
           */
          static int guard_inode_permission(struct inode *inode, int mask)
          {
              // 1. 如果模块被禁用，或不是写入操作，直接放行
              if (!guard_enabled || !(mask & MAY_WRITE))
                  return 0;

              // 2. 如果在Recovery模式下允许写入，并且当前是Recovery模式，则记录并放行
              if (allow_in_recovery && is_recovery_mode()) {
                  static bool recovery_msg_shown = false;
                  if (!recovery_msg_shown) {
                      pr_info("baseband_guard: Write allowed in recovery mode. Protection is temporarily bypassed.\n");
                      recovery_msg_shown = true;
                  }
                  return 0;
              }

              // 3. 只对块设备文件进行检查
              if (S_ISBLK(inode->i_mode)) {
                  struct block_device *bdev = bdi_get_bdev(inode->i_sb->s_bdi, inode->i_rdev);
                  int ret = check_partition_permission(bdev);
                  // bdi_get_bdev 增加了引用计数，使用后需要释放
                  if (bdev)
                      bdput(bdev);
                  return ret;
              }

              // 4. 对于其他所有文件类型，允许访问
              return 0;
          }

          static struct security_hook_list baseband_guard_hooks[] __lsm_ro_after_init = {
              LSM_HOOK_INIT(inode_permission, guard_inode_permission),
          };


          /* ================== Sysfs 接口 (用于状态监控) ================== */

          static struct kobject *baseband_guard_kobj;

          // sysfs属性: 显示所有受保护的分区
          static ssize_t protected_list_show(struct kobject *kobj, struct kobj_attribute *attr, char *buf)
          {
              int len = 0;
              const char **p;

              len += scnprintf(buf + len, PAGE_SIZE - len, "--- Critical Partitions (Protected) ---\n");
              for (p = protected_partitions; *p; ++p)
                  len += scnprintf(buf + len, PAGE_SIZE - len, "%s\n", *p);

              if (protect_boot_partitions) {
                  len += scnprintf(buf + len, PAGE_SIZE - len, "\n--- Boot Partitions (Protected) ---\n");
                  for (p = boot_partitions; *p; ++p)
                      len += scnprintf(buf + len, PAGE_SIZE - len, "%s\n", *p);
              } else {
                  len += scnprintf(buf + len, PAGE_SIZE - len, "\n--- Boot Partitions (Protection Disabled) ---\n");
              }


              return len;
          }

          static struct kobj_attribute protected_list_attr = __ATTR_RO(protected_list);

          static struct attribute *baseband_guard_attrs[] = {
              &protected_list_attr.attr,
              NULL,
          };

          static struct attribute_group baseband_guard_attr_group = {
              .attrs = baseband_guard_attrs,
          };


          /* ================== 模块初始化与退出 ================== */

          static int __init baseband_guard_init(void)
          {
              int ret;

              pr_info("baseband_guard: Initializing advanced partition protection...\n");

              // 1. 注册LSM钩子，建立核心防线
              security_add_hooks(baseband_guard_hooks, ARRAY_SIZE(baseband_guard_hooks), "baseband_guard");

              // 2. 创建sysfs接口，用于状态查询
              baseband_guard_kobj = kobject_create_and_add("baseband_guard", kernel_kobj);
              if (!baseband_guard_kobj) {
                  pr_warn("baseband_guard: Failed to create kobject for sysfs interface.\n");
                  return 0; // 非致命错误，核心保护依然生效
              }

              ret = sysfs_create_group(baseband_guard_kobj, &bbg_attr_group);
              if (ret) {
                  pr_warn("baseband_guard: Failed to create sysfs group.\n");
                  kobject_put(baseband_guard_kobj);
              }

              pr_info("baseband_guard: LSM hook registered. Protection is active.\n");
              return 0;
          }

          static void __exit baseband_guard_exit(void)
          {
              // LSM钩子在设计上通常不允许被移除，以保证系统安全状态的持久性。
              // 因此，退出函数只清理sysfs接口。
              pr_info("baseband_guard: Module exit (LSM hooks remain active for security).\n");
              if (baseband_guard_kobj) {
                  sysfs_remove_group(baseband_guard_kobj, &baseband_guard_attr_group);
                  kobject_put(baseband_guard_kobj);
              }
          }

          module_init(bbg_init);
          module_exit(bbg_exit);

          MODULE_DESCRIPTION("Advanced partition protection using LSM hooks and sysfs interface.");
          MODULE_AUTHOR("xx2901318208 & Manus");
          MODULE_LICENSE("GPL v2");
          EOF

          echo "正在强制重写 Makefile..."
          cat > drivers/baseband_guard/Makefile <<'EOF'
          obj-$(CONFIG_BASEBAND_GUARD) += baseband_guard.o
          ccflags-y += -I$(srctree)/include -I$(srctree)/fs
          EOF
          
          echo "文件强制覆盖完成。"

      - name: 构建内核 (详细日志模式)
        run: |
          WORKDIR="$(pwd)"
          export PATH="/usr/lib/ccache:$PATH"
          export PATH="$WORKDIR/kernel_workspace/clang20/bin:$PATH"
          export PATH="$WORKDIR/kernel_workspace/build-tools/bin:$PATH"
          CLANG_DIR="$WORKDIR/kernel_workspace/clang20/bin"
          CLANG_VERSION="$($CLANG_DIR/clang --version | head -n 1)"
          LLD_VERSION="$($CLANG_DIR/ld.lld --version | head -n 1)"
          echo "编译器信息:"
          echo "Clang版本: $CLANG_VERSION"
          echo "LLD版本: $LLD_VERSION"
          pahole_version=$(pahole --version 2>/dev/null | head -n1); [ -z "$pahole_version" ] && echo "pahole版本：未安装" || echo "pahole版本：$pahole_version"
          
          export CCACHE_COMPILERCHECK="%compiler% -dumpmachine; %compiler% -dumpversion"
          export CCACHE_NOHASHDIR="true"
          export CCACHE_HARDLINK="true"
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          export CCACHE_MAXSIZE="3G"
          
          cd kernel_workspace/common
          
          sudo rm -rf /usr/share/dotnet &
          sudo rm -rf /usr/local/lib/android &
          sudo rm -rf /opt/ghc &
          sudo rm -rf /opt/hostedtoolcache/CodeQL &

          # 核心修改：添加 V=1 获取详细编译命令
          make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC="ccache clang" LD=ld.lld HOSTLD=ld.lld O=out KCFLAGS+=-O2 KCFLAGS+=-Wno-error V=1 gki_defconfig Image
          
          echo "内核编译完成！"
          echo "ccache状态："
          ccache -s
          echo "编译后空间:"
          df -h
         
      - name: 应用KPM并修补内核
        run: |
          if [[ ${{ github.event.inputs.kpm_enable }} == 'true' && ${{ github.event.inputs.ksu_type }} == "sukisu" ]]; then
            echo "正在应用KPM并修补内核..."
            cd kernel_workspace/common/out/arch/arm64/boot
            curl -LO https://github.com/ShirkNeko/SukiSU_KernelPatch_patch/releases/download/0.12.0/patch_linux
            chmod +x patch_linux
            ./patch_linux
            rm -f Image
            mv oImage Image
          fi
          
      - name: 克隆 AnyKernel3 并打包
        run: |
          cd kernel_workspace
          git clone https://github.com/xx2901318208/AnyKernel3 --depth=1
          rm -rf ./AnyKernel3/.git
          cd AnyKernel3
          cp ../common/out/arch/arm64/boot/Image ./Image
          if [[ ! -f ./Image ]]; then
            echo "未找到内核镜像文件，构建可能出错"
            exit 1
          fi
          if [[ ${{ github.event.inputs.ksu_type }} == "sukisu" ]]; then
            KSU_TYPENAME="SukiSU"
          else
            KSU_TYPENAME="KSUNext"
          fi
          if [[ "${{ github.event.inputs.lz4_enable }}" == "2" || "${{ github.event.inputs.lz4_enable }}" == "3" ]]; then
            wget https://raw.githubusercontent.com/xx2901318208/oppo_oplus_realme_sm8650/refs/heads/main/ZRAM.zip
          fi
          if [[ -n "${{ github.event.inputs.kernel_suffix }}" ]]; then
            zip -r ../AnyKernel3_${KSU_TYPENAME}_${{ env.KSUVER }}_${{ env.KERNEL_VERSION }}_A15_${{ github.event.inputs.kernel_suffix }}.zip ./*
          else
            zip -r ../AnyKernel3_${KSU_TYPENAME}_${{ env.KSUVER }}_${{ env.KERNEL_VERSION }}_A15_${{ env.KERNEL_NAME }}.zip ./*
          fi

      - name: 上传 ZIP 工件
        uses: actions/upload-artifact@v4
        with:
          name: Kernel_ZIP_Artifacts
          path: ${{ github.workspace }}/kernel_workspace/AnyKernel*.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      actions: read
      
    steps:
      - name: 下载 ZIP 工件
        uses: actions/download-artifact@v4
        with:
          name: Kernel_ZIP_Artifacts
          path: ./release_zips

      - name: 设置环境变量
        run: |
          if [[ -n "${{ github.event.inputs.kernel_suffix }}" ]]; then
            FULL_VERSION=${{ format('{0}.118-{1}', env.KERNEL_VERSION, github.event.inputs.kernel_suffix) }}
            echo "FULL_VERSION=$FULL_VERSION" >> $GITHUB_ENV
            export FULL_VERSION=$FULL_VERSION
          else
            FULL_VERSION=${{ format('{0}.118-{1}', env.KERNEL_VERSION, env.KERNEL_NAME) }}
            echo "FULL_VERSION=$FULL_VERSION" >> $GITHUB_ENV
            export FULL_VERSION=$FULL_VERSION
          fi
          TIME="$(TZ='Asia/Shanghai' date +'%y%m%d%H%M%S')"
          TIME_FORM="$(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')"
          echo "TIME=$TIME" >> $GITHUB_ENV
          echo "TIME_FORM=$TIME_FORM" >> $GITHUB_ENV
          TAG_HEAD="OPPO+OPlus+Realme-A15-build"
          echo "TAG_HEAD=$TAG_HEAD" >> $GITHUB_ENV
          if [[ ${{ github.event.inputs.ksu_type }} == "sukisu" ]]; then
            KSU_BRANCH="SukiSU Ultra"
          else
            KSU_BRANCH="KernelSU Next"
          fi
          echo "KSU_BRANCH=$KSU_BRANCH" >> $GITHUB_ENV
          if [[ "${{ github.event.inputs.lz4_enable }}" == "2" || "${{ github.event.inputs.lz4_enable }}" == "3" ]]; then
            lz4kd_enable="true"
          else
            lz4kd_enable="false"
          fi
          if [[ "${{ github.event.inputs.lz4_enable }}" == "1" || "${{ github.event.inputs.lz4_enable }}" == "3" ]]; then
            lz4_zstd_enable="true"
          else
            lz4_zstd_enable="false"
          fi
          if [[ "${{ github.event.inputs.ssg_rekernel_enable }}" == "1" || "${{ github.event.inputs.ssg_rekernel_enable }}" == "3" ]]; then
            ssg_enable="true"
          else
            ssg_enable="false"
          fi
          if [[ "${{ github.event.inputs.ssg_rekernel_enable }}" == "2" || "${{ github.event.inputs.ssg_rekernel_enable }}" == "3" ]]; then
            rekernel_enable="true"
          else
            rekernel_enable="false"
          fi
          echo "lz4kd_enable=$lz4kd_enable" >> $GITHUB_ENV
          echo "lz4_zstd_enable=$lz4_zstd_enable" >> $GITHUB_ENV
          echo "ssg_enable=$ssg_enable" >> $GITHUB_ENV
          echo "rekernel_enable=$rekernel_enable" >> $GITHUB_ENV
         
      - name: 创建发布
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "${{ env.TAG_HEAD }}-${{ env.TIME }}"
          name: "${{ env.TAG_HEAD }}-${{ env.FULL_VERSION }}"
          body: |
            ### 📱 欧加真 Android 15 ${{ env.KSU_BRANCH }} SM8650 通用内核 | 构建信息
            - 内核版本号: ${{ env.FULL_VERSION }}
            - 编译时间: ${{ env.TIME_FORM }}
            - 机型：欧加真骁龙8Gen3 6.1.118 Android 14内核通用（基于一加12 6.1.118 Android 15 版官方OKI源码）
            - 特性：${{ env.KSU_BRANCH }} + SUSFS + VFS + KPM
            - hook模式：${{ github.event.inputs.hook_method }}
            - KPM支持 (仅对sukisu生效)：${{ github.event.inputs.kpm_enable }}
            - LZ4KD支持：${{ env.lz4kd_enable }}
            - LZ4支持：${{ env.lz4_zstd_enable }}
            - 网络功能增强：${{ github.event.inputs.better_net }}
            - BBR/Brutal 等拥塞控制算法支持：${{ github.event.inputs.bbr_enable }}
            - 三星SSG IO调度器支持：${{ env.ssg_enable }}
            - Re-Kernel支持：${{ env.rekernel_enable }}
            - 推荐系统：ColorOS 15 / RealmeUI 6.0
            - SukiSU Ultra管理器下载：[SukiSU-Ultra](https://github.com/SukiSU-Ultra/SukiSU-Ultra/releases)
            - KernelSU Next管理器下载：[KernelSU-Next](https://github.com/KernelSU-Next/KernelSU-Next/releases)
            ### ⏫️ 更新内容：
            - 更新${{ env.KSU_BRANCH }}至最新版本（${{ needs.build.outputs.ksuver }}）
            - (预留)
            ### 📋 安装方法 | Installation Guide
            1. 若你的手机已经安装了第三方Recovery（如TWRP)，可下载对应机型的AnyKernel刷机包后进入Recovery模式，通过Recovery刷入刷机包后重启设备
            2. 若你的手机之前已有 root 权限，可在手机上安装[HorizonKernelFlasher](https://github.com/libxzr/HorizonKernelFlasher/releases)，在HorizonKernelFlasher中刷入AnyKernel刷机包并重启
            3. 若你之前已刷入SukiSU Ultra内核，且SukiSU Ultra管理器已更新至最新版本，可在SukiSU Ultra管理器中直接刷入AnyKernel刷机包并重启
            4. 刷入无lz4kd补丁版的内核前若刷入过lz4kd补丁版的内核，为避免出错，请先关闭zram模块
            #### ※※※刷写内核有风险，为防止出现意外导致手机变砖，在刷入内核前请务必用[KernelFlasher](https://github.com/capntrips/KernelFlasher)等软件备份boot等关键启动分区!※※※
          draft: false
          prerelease: false
          files: |
            release_zips/AnyKernel3_*.zip
