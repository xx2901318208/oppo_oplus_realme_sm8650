name: 加速版构建 6.1.118 欧加真OKI内核

env:
  TZ: Asia/Shanghai
  CPU: 'sm8650'
  FEIL: 'oppo+oplus+realme'
  ANDROID_VERSION: 'android14'
  KERNEL_VERSION: '6.1'
  KERNEL_NAME: 'android14-11-o-g31602dff16cb'
  KERNELSU_VARIANT: 'SukiSU-Ultra'
  KERNELSU_BRANCH: 'susfs-main'

on:
  workflow_dispatch:
    inputs:
      ksu_type:
        description: 'KernelSU分支(SukiSU Ultra/KernelSU Next,默认SukiSU Ultra)'
        required: true
        type: choice
        default: 'sukisu'
        options:
          - 'sukisu'
          - 'ksunext'
      hook_method:
        description: 'hook模式(大部分情况manual即可，少数需切换sus su模式的场景才需要kprobes钩子)'
        required: true
        type: choice
        default: 'manual'
        options:
          - 'manual'
          - 'kprobes'
      kpm_enable:
        description: '是否开启kpm(仅对sukisu生效;可能轻微增加耗电，不需要可关闭)'
        required: true
        type: choice
        default: 'true'
        options:
          - 'true'
          - 'false'
      lz4_enable:
        description: '是否安装 lz4 1.10.0+zstd 1.5.7 补丁及 LZ4KD 补丁(0=均不安装,1=安装lz4&zstd补丁,2=安装lz4kd补丁,3=均安装,默认1)'
        required: true
        type: choice
        default: '3'
        options:
          - '0'
          - '1'
          - '2'
          - '3'
      bbr_enable:
        description: "是否启用bbr算法(优化上行数据,对手机日用无太大意义甚至可能负优化;false关闭,true仅加入算法,default设为默认)"
        required: true
        type: choice
        default: 'true'
        options:
          - 'false'
          - 'true'
          - 'default'
      SCHED_EEVDF:
        description: "是否启用SCHED_EEVDF算法(false关闭,true仅加入算法,default设为默认6.6内核可用)"
        required: true
        type: choice
        default: 'true'
        options:
          - 'false'
          - 'true'
          - 'default'
      better_net:
        description: '是否开启网络功能增强优化配置(优化代理连接,IPV6等功能)'
        required: true
        type: choice
        default: 'true'
        options:
          - 'true'
          - 'false'
      ssg_rekernel_enable:
        description: '是否启用三星SSG IO调度器及Re-Kernel支持(0=均不安装,1=安装SSG IO调度器,2=安装Re-Kernel,3=均安装,默认1)'
        required: true
        type: choice
        default: '3'
        options:
          - '0'
          - '1'
          - '2'
          - '3'
      kernel_suffix:
        description: '内核后缀(留空默认,开头别加连字符,勿加空格等影响指令运行的保留字符)'
        required: false
        type: string
        default: ''
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      ksuver: ${{ steps.ksu_version.outputs.ksuver }}
    steps:
      - name: 安装配置环境依赖
        run: |
          sudo apt-mark hold firefox
          sudo apt-mark hold libc-bin
          sudo apt purge man-db
          sudo rm -rf /var/lib/man-db/auto-update
          sudo apt update
          sudo apt-get install -y --no-install-recommends \
            curl bison flex make binutils git perl gcc python3 \
            python-is-python3 bc libssl-dev libelf-dev \
            bc aria2 zip unzip ccache
      - name: 配置ccache目录
        run: |
          echo "CCACHE_DIR=$HOME/.ccache_6.1.118" >> $GITHUB_ENV
          echo "CCACHE_MAXSIZE=3G" >> $GITHUB_ENV
          echo "当前磁盘空间："
          df -h
          echo "当前构建内核版本：6.1.118"
          rm -rf kernel_workspace
          mkdir kernel_workspace
      - name: 载入当前版本内核的 ccache缓存
        uses: actions/cache@v3
        id: ccache-restore
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-new-6.1.118-${{ runner.os }}-main
          restore-keys: |
            ccache-new-6.1.118-${{ runner.os }}-
            ccache-new-6.1.118-
            ccache-new-
      - name: 初始化并配置ccache
        run: |
          # 设置ccache环境变量
          export CCACHE_COMPILERCHECK="%compiler% -dumpmachine; %compiler% -dumpversion"
          export CCACHE_NOHASHDIR="true"
          export CCACHE_HARDLINK="true"
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          export CCACHE_MAXSIZE="${{ env.CCACHE_MAXSIZE }}"
          
          # 确保ccache目录存在
          mkdir -p "$CCACHE_DIR"
          
          # 每次运行都重新配置缓存大小
          echo "配置ccache缓存大小为: $CCACHE_MAXSIZE"
          ccache -M "$CCACHE_MAXSIZE"
          ccache -o compression=true
          
          # 显示初始缓存状态
          echo "ccache初始状态:"
          ccache -s
          
          # 如果缓存恢复命中，显示详细信息
          if [ "${{ steps.ccache-restore.outputs.cache-hit }}" == 'true' ]; then
            echo "ccache缓存命中详情:"
            ccache -sv
          fi
      - name: 初始化源码仓库及llvm-Clang20工具链
        run: |
          cd kernel_workspace
          echo "正在克隆源码仓库..."
          aria2c -s16 -x16 -k1M https://github.com/cctv18/android_kernel_common_oneplus_sm8650/archive/refs/heads/oneplus/sm8650_v_15.0.0_oneplus12_6.1.118.zip -o common.zip && unzip -q common.zip && mv "android_kernel_common_oneplus_sm8650-oneplus-sm8650_v_15.0.0_oneplus12_6.1.118" common && rm -rf common.zip &
          echo "正在克隆llvm-Clang20工具链..." && mkdir -p clang20 && aria2c -s16 -x16 -k1M https://github.com/cctv18/oneplus_sm8650_toolchain/releases/download/LLVM-Clang20-r547379/clang-r547379.zip -o clang.zip && unzip -q clang.zip -d clang20 && rm -rf clang.zip &
          echo "正在克隆构建工具..." && aria2c -s16 -x16 -k1M https://github.com/cctv18/oneplus_sm8650_toolchain/releases/download/LLVM-Clang20-r547379/build-tools.zip -o build-tools.zip && unzip -q build-tools.zip && rm -rf build-tools.zip &
          wait
          echo "所有源码及llvm-Clang20工具链初始化完成！"
          
          echo "正在去除 ABI 保护 & 去除 dirty 后缀..."
          rm common/android/abi_gki_protected_exports_* || true
          for f in common/scripts/setlocalversion; do
            sed -i 's/ -dirty//g' "$f"
            sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' "$f"
          done

      - name: 添加KernelSU
        id: ksu_version
        run: |
          # 进入内核工作目录
          cd kernel_workspace
          
          if [[ ${{ github.event.inputs.ksu_type }} == "sukisu" ]]; then
            echo "正在配置SukiSU Ultra..."
            curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/refs/heads/main/kernel/setup.sh" | bash -s susfs-main
            
            cd ./KernelSU
            # 获取当前 Git 提交的短哈希 (8位)
            GIT_COMMIT_HASH=$(git rev-parse --short=8 HEAD)
            echo "当前提交哈希: $GIT_COMMIT_HASH"
            export KSU_VERSION=$KSU_VERSION
            
            # 尝试最多 3 次获取 KernelSU API 版本号
            for i in {1..3}; do
              # 从远程 Makefile 中提取 KSU_API_VERSION
              KSU_API_VERSION=$(curl -s "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/susfs-main/kernel/Makefile" | \
                # 查找第一个包含版本定义的行
                grep -m1 "KSU_VERSION_API :=" | \
                # 提取等号后的值
                awk -F'= ' '{print $2}' | \
                # 删除所有空白字符
                tr -d '[:space:]')
              
              # 如果成功获取到版本号则跳出循环，否则等待 1 秒后重试
              [ -n "$KSU_API_VERSION" ] && break || sleep 1
            done
            
            # 如果获取失败，使用默认版本号 3.1.7
            [ -z "$KSU_API_VERSION" ] && KSU_API_VERSION="3.1.7"
            
            # 将 API 版本号存储到 GitHub 环境变量
            echo "KSU_API_VERSION=$KSU_API_VERSION" >> $GITHUB_ENV
            
            # 创建版本定义模板&版本格式函数: 使用获取的提交哈希和固定后缀
            # KSU_VERSION_API: API 版本定义
            # KSU_VERSION_FULL: 完整版本定义
            VERSION_DEFINITIONS=$'define get_ksu_version_full\nv\$1-''"$GIT_COMMIT_HASH"''@Coolapk_1263599071\nendef\n\nKSU_VERSION_API := ''"$KSU_API_VERSION"''\nKSU_VERSION_FULL := v''"$KSU_API_VERSION"''-''"$GIT_COMMIT_HASH"''Coolapk_R1263599071'
            
            # 清理内核 Makefile 中的旧版本定义
            # 删除版本函数
            sed -i '/define get_ksu_version_full/,/endef/d' kernel/Makefile
            # 删除 API 版本定义
            sed -i '/KSU_VERSION_API :=/d' kernel/Makefile
            # 删除完整版本定义
            sed -i '/KSU_VERSION_FULL :=/d' kernel/Makefile
            
            # 在 REPO_OWNER 行后插入新版本定义
            awk -v def="$VERSION_DEFINITIONS" '
              # 当找到 REPO_OWNER 行时，插入版本定义并设置标记
              /REPO_OWNER :=/ {print; print def; inserted=1; next}
              # 打印所有行
              1
              # 如果未找到插入点，在文件末尾追加
              END {if (!inserted) print def}
            ' kernel/Makefile > kernel/Makefile.tmp && mv kernel/Makefile.tmp kernel/Makefile
            
            # 生成自定义版本号（基于提交计数）, 失败时使用 114514
            KSU_VERSION=$(expr $(git rev-list --count main) + 10700 2>/dev/null || echo 114514)
            
            # 存储版本号到 GitHub 环境变量
            echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
            echo "ksuver=$KSU_VERSION" >> $GITHUB_OUTPUT
            
            # 验证修改结果
            grep -A10 "REPO_OWNER" kernel/Makefile  # 检查插入点后的内容
            grep "KSU_VERSION_FULL" kernel/Makefile  # 确认版本定义存在
            
            echo "SukiSU版本号: v${KSU_API_VERSION}-${GIT_COMMIT_HASH}@cctv18"
          else
            echo "正在配置KernelSU Next..."
            curl -LSs "https://raw.githubusercontent.com/pershoot/KernelSU-Next/next-susfs/kernel/setup.sh" | bash -s next-susfs
            
            cd KernelSU-Next
            KSU_VERSION=$(expr $(curl -sI "https://api.github.com/repos/pershoot/KernelSU-Next/commits?sha=next&per_page=1" | grep -i "link:" | sed -n 's/.*page=\([0-9]*\)>; rel="last".*/\1/p') "+" 10200)
            echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
            echo "ksuver=$KSU_VERSION" >> $GITHUB_OUTPUT
            sed -i "s/DKSU_VERSION=11998/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile
          fi
      - name: 应用 KernelSU & SUSFS 补丁
        run: |
          cd kernel_workspace
          
          if [[ ${{ github.event.inputs.ksu_type }} == "sukisu" ]]; then
            echo "正在添加SukiSU Ultra补丁..."
            git clone https://github.com/ShirkNeko/susfs4ksu.git -b gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}
            git clone https://github.com/ShirkNeko/SukiSU_patch.git
            
            cp ./susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch ./common/
            cp ./susfs4ksu/kernel_patches/fs/* ./common/fs/
            cp ./susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
            cp ./SukiSU_patch/hooks/syscall_hooks.patch ./common/
            cp ./SukiSU_patch/69_hide_stuff.patch ./common/
            
            cd ./common
            patch -p1 < 50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch || true
            patch -p1 < syscall_hooks.patch || true
            patch -p1 < 69_hide_stuff.patch || true
          else
            echo "正在添加KernelSU Next补丁..."
            git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}
            git clone https://github.com/WildKernels/kernel_patches.git
            
            cp ./susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch ./common/
            cp ./susfs4ksu/kernel_patches/fs/* ./common/fs/
            cp ./susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
            cp ./kernel_patches/next/scope_min_manual_hooks_v1.4.patch ./common/
            cp ./kernel_patches/69_hide_stuff.patch ./common/
            
            cd ./common
            patch -p1 < 50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch || true
            patch -p1 -N -F 3 < scope_min_manual_hooks_v1.4.patch || true
            patch -p1 -N -F 3 < 69_hide_stuff.patch || true
          fi
      - name: 应用 baseband_guard 补丁
        run: |
            cd kernel_workspace/common
            mkdir -p drivers/baseband_guard
            touch drivers/baseband_guard/Makefile
            touch drivers/baseband_guard/baseband_guard.c
            curl -LSs https://raw.githubusercontent.com/xx2901318208/oppo_oplus_realme_sm8650/main/other_patch/baseband_guard.patch -o baseband_guard.patch
            sed -i '/\\ No newline at end of file/d' baseband_guard.patch
            patch -p1 < baseband_guard.patch
      - name: 应用lz4 1.10.0 & zstd 1.5.7补丁
        run: |
          if [[ "${{ github.event.inputs.lz4_enable }}" == "1" || "${{ github.event.inputs.lz4_enable }}" == "3" ]]; then
            echo "正在添加lz4 1.10.0 & zstd 1.5.7补丁…"
            cd kernel_workspace
            
            git clone https://github.com/cctv18/oppo_oplus_realme_sm8650.git
            cp ./oppo_oplus_realme_sm8650/zram_patch/001-lz4.patch ./common/
            cp ./oppo_oplus_realme_sm8650/zram_patch/lz4armv8.S ./common/lib
            cp ./oppo_oplus_realme_sm8650/zram_patch/002-zstd.patch ./common/
            
            cd ./common
            git apply -p1 < 001-lz4.patch || true
            patch -p1 < 002-zstd.patch || true
          fi
      - name: 应用 lz4kd 补丁
        run: |
          if [[ "${{ github.event.inputs.lz4_enable }}" == "2" || "${{ github.event.inputs.lz4_enable }}" == "3" ]]; then
            echo "正在添加lz4kd补丁…"
            cd kernel_workspace
            
            if [[ ${{ github.event.inputs.ksu_type }} == "ksunext" ]]; then
              git clone https://github.com/ShirkNeko/SukiSU_patch.git
            fi
            
            cd common
            cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./include/linux/
            cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./lib
            cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./crypto
            cp ../SukiSU_patch/other/zram/zram_patch/${{ env.KERNEL_VERSION }}/lz4kd.patch ./
            patch -p1 -F 3 < lz4kd.patch || true
          fi
      - name: 添加 KSU & SUSFS 配置项
        run: |
          cd kernel_workspace
          
          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_BASEBAND_GUARD=y" >> ./common/arch/arm64/configs/gki_defconfig
          
          if [[ ${{ github.event.inputs.kpm_enable }} == 'true' && ${{ github.event.inputs.ksu_type }} == "sukisu" ]]; then
            echo "CONFIG_KPM=y" >> ./common/arch/arm64/configs/gki_defconfig
          fi
          
          if [ "${{ github.event.inputs.hook_method }}" == "kprobes" ]; then
            echo "正在开启kprobes钩子..."
            echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_MANUAL_HOOK=n" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_KPROBES_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig
          else
            echo "正在开启manual钩子..."
            echo "CONFIG_KSU_MANUAL_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
          fi
          
          echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS_AUTO_KSTAT_SUPPORT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
          
          if [[ "${{ github.event.inputs.lz4_enable }}" == "2" || "${{ github.event.inputs.lz4_enable }}" == "3" ]]; then
            echo "CONFIG_CRYPTO_LZ4KD=y" >> ./common/arch/arm64/configs/gki_defconfig
          fi
      - name: 添加bbr配置项
        run: |
          if [[ "${{ github.event.inputs.bbr_enable }}" != "false" ]]; then
            echo "正在添加bbr配置项..."
            echo "CONFIG_TCP_CONG_BBR=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            if [[ "${{ github.event.inputs.bbr_enable }}" == "default" ]]; then
              echo "CONFIG_DEFAULT_BBR=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
              echo "CONFIG_DEFAULT_TCP_CONG=\"bbr\"" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            fi
          fi
      - name: 添加SCHED_EEVDF配置项
        run: |
          if [[ "${{ github.event.inputs.SCHED_EEVDF }}" != "false" ]]; then
            echo "正在添加SCHED_EEVDF配置项..."
            echo "CONFIG_SCHED_EEVDF=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            if [[ "${{ github.event.inputs.SCHED_EEVDF }}" == "default" ]]; then
              echo "CONFIG_SCHED_DEFAULT_GOV=EEVDF" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            fi
          fi
      - name: 添加网络功能增强优化配置项
        run: |
          if [[ "${{ github.event.inputs.better_net }}" == "true" ]]; then
            echo "正在添加网络功能增强优化配置项..."
            echo "CONFIG_NETFILTER_XT_MATCH_HASHLIMIT=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_NETFILTER_XT_MATCH_QUOTA2=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_NETFILTER_XT_MATCH_QUOTA2_LOG=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_NETFILTER_XT_TARGET_HL=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_NETFILTER_XT_TARGET_HMARK=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_NF_TARGET_TTL=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP6_NF_TARGET_HL=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_NETFILTER_XT_TARGET_TPROXY=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_NETFILTER_XT_TARGET_REDIRECT=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_NETFILTER_XT_MATCH_OWNER=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_NETFILTER_TPROXY=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_NF_NAT_REDIRECT=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_NF_FILTER=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_NF_TARGET_REJECT=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_NF_NAT=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_NF_MANGLE=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP6_NF_FILTER=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP6_NF_TARGET_REJECT=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP6_NF_MANGLE=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP6_NF_NAT=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_BRIDGE_NF_EBTABLES=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_BRIDGE_EBT_T_FILTER=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_BRIDGE_EBT_T_NAT=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_BRIDGE_EBT_BROUTE=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_BRIDGE_EBT_AMONG=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_BRIDGE_EBT_802_3=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_BRIDGE_EBT_ARP=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_BRIDGE_EBT_IP=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_BRIDGE_EBT_IP6=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_BRIDGE_EBT_LIMIT=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_BRIDGE_EBT_MARK=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_BRIDGE_EBT_PKTTYPE=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_BRIDGE_EBT_STP=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_BRIDGE_EBT_VLAN=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_BRIDGE_EBT_ARPREPLY=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_BRIDGE_EBT_DNAT=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_BRIDGE_EBT_MARK_T=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_BRIDGE_EBT_REDIRECT=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_BRIDGE_EBT_SNAT=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_BRIDGE_EBT_LOG=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_BRIDGE_EBT_ULOG=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_BRIDGE_EBT_NFLOG=y" >> ./kernel_workspace/common/arch/arm64/configs/gki_defconfig
          fi
      - name: 添加三星SSG IO调度器及Re-Kernel支持
        run: |
          if [[ "${{ github.event.inputs.ssg_rekernel_enable }}" == "1" || "${{ github.event.inputs.ssg_rekernel_enable }}" == "3" ]]; then
            echo "正在添加三星SSG IO调度器..."
            cd kernel_workspace
            
            if [[ ! -d "./oppo_oplus_realme_sm8650" ]]; then
              git clone https://github.com/cctv18/oppo_oplus_realme_sm8650.git
            fi
            
            cp ./oppo_oplus_realme_sm8650/ssg_patch/001-ssg.patch ./common/
            cd ./common
            patch -p1 < 001-ssg.patch || true
            echo "CONFIG_IOSCHED_SSG=y" >> ./arch/arm64/configs/gki_defconfig
            echo "CONFIG_DEFAULT_IOSCHED=\"ssg\"" >> ./arch/arm64/configs/gki_defconfig
          fi
          
          if [[ "${{ github.event.inputs.ssg_rekernel_enable }}" == "2" || "${{ github.event.inputs.ssg_rekernel_enable }}" == "3" ]]; then
            echo "正在添加Re-Kernel支持..."
            cd kernel_workspace
            
            if [[ ! -d "./oppo_oplus_realme_sm8650" ]]; then
              git clone https://github.com/cctv18/oppo_oplus_realme_sm8650.git
            fi
            
            cp ./oppo_oplus_realme_sm8650/re_kernel_patch/001-re_kernel.patch ./common/
            cd ./common
            patch -p1 < 001-re_kernel.patch || true
            echo "CONFIG_RE_KERNEL=y" >> ./arch/arm64/configs/gki_defconfig
          fi
      - name: 开始构建内核
        run: |
          cd kernel_workspace
          
          export PATH="$PWD/clang20/bin:$PWD/build-tools/linux-x86/bin:$PATH"
          export CLANG_TRIPLE="aarch64-linux-gnu-"
          export CROSS_COMPILE="aarch64-linux-gnu-"
          export CROSS_COMPILE_ARM32="arm-linux-gnueabi-"
          export ARCH="arm64"
          export SUBARCH="arm64"
          export KBUILD_BUILD_USER="cctv18"
          export KBUILD_BUILD_HOST="Github-Actions"
          export KBUILD_BUILD_TIMESTAMP="$(date -u "+%Y-%m-%d %H:%M:%S")"
          export TZ="Asia/Shanghai"
          
          cd common
          
          # 构建内核
          make O=out ${{ env.FEIL }}_${{ env.CPU }}_defconfig
          make O=out -j$(nproc --all)
          
          # 检查构建结果
          if [ -f "out/arch/arm64/boot/Image" ]; then
            echo "内核构建成功！"
          else
            echo "内核构建失败！"
            exit 1
          fi
      - name: 打包内核镜像
        run: |
          cd kernel_workspace
          
          # 创建打包目录
          mkdir -p AnyKernel
          cd AnyKernel
          
          # 下载AnyKernel3
          git clone https://github.com/cctv18/AnyKernel3.git
          
          # 复制内核镜像
          cp ../common/out/arch/arm64/boot/Image ./AnyKernel3/
          
          # 修改anykernel.sh
          sed -i "s/kernel.string=.*/kernel.string=${{ env.KERNEL_NAME }}-${{ steps.ksu_version.outputs.ksuver }}-${{ github.event.inputs.kernel_suffix }}/g" ./AnyKernel3/anykernel.sh
          sed -i "s/do.device.check=1/do.device.check=0/g" ./AnyKernel3/anykernel.sh
          sed -i "s/do.modules=1/do.modules=0/g" ./AnyKernel3/anykernel.sh
          sed -i "s/do.systemless=1/do.systemless=0/g" ./AnyKernel3/anykernel.sh
          sed -i "s/do.cleanup=1/do.cleanup=0/g" ./AnyKernel3/anykernel.sh
          sed -i "s/do.cleanuponabort=1/do.cleanuponabort=0/g" ./AnyKernel3/anykernel.sh
          
          # 打包
          cd AnyKernel3
          zip -r9 "${{ env.KERNEL_NAME }}-${{ steps.ksu_version.outputs.ksuver }}-${{ github.event.inputs.kernel_suffix }}".zip * -x .git README.md *placeholder
      - name: 上传内核到Github-Releases
        uses: ncipollo/release-action@v1
        with:
          artifacts: "kernel_workspace/AnyKernel/AnyKernel3/*.zip"
          name: "${{ env.KERNEL_NAME }}-${{ steps.ksu_version.outputs.ksuver }}-${{ github.event.inputs.kernel_suffix }}"
          tag: "${{ env.KERNEL_NAME }}-${{ steps.ksu_version.outputs.ksuver }}-${{ github.event.inputs.kernel_suffix }}"
          body: |
            - KernelSU Version: ${{ steps.ksu_version.outputs.ksuver }}
            - KernelSU Branch: ${{ github.event.inputs.ksu_type }}
            - Hook Method: ${{ github.event.inputs.hook_method }}
            - KPM Enabled: ${{ github.event.inputs.kpm_enable }}
            - LZ4 Enabled: ${{ github.event.inputs.lz4_enable }}
            - BBR Enabled: ${{ github.event.inputs.bbr_enable }}
            - SCHED_EEVDF Enabled: ${{ github.event.inputs.SCHED_EEVDF }}
            - Better Net Enabled: ${{ github.event.inputs.better_net }}
            - SSG/Re-Kernel Enabled: ${{ github.event.inputs.ssg_rekernel_enable }}
          token: ${{ secrets.GITHUB_TOKEN }}


