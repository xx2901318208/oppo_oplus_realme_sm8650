name: 加速版构建 6.1.118 欧加真OKI内核

env:
  TZ: Asia/Shanghai
  CPU: 'sm8650'
  FEIL: 'gt5pro'
  ANDROID_VERSION: 'android14'
  KERNEL_VERSION: '6.1'
  KERNEL_NAME: '11-o-g31602dff16cb'
  KERNELSU_VARIANT: 'SukiSU-Ultra'
  KERNELSU_BRANCH: 'susfs-main'
  KANDROID_VERSION: 'android14'

on:
  workflow_dispatch:
    inputs:
      ksu_type:
        description: 'KernelSU分支(SukiSU Ultra/KernelSU Next,默认SukiSU Ultra)'
        required: true
        type: choice
        default: 'sukisu'
        options:
          - 'sukisu'
          - 'ksunext'
      hook_method:
        description: 'hook模式(大部分情况manual即可，少数需切换sus su模式的场景才需要kprobes钩子)'
        required: true
        type: choice
        default: 'manual'
        options:
          - 'manual'
          - 'kprobes'
      kpm_enable:
        description: '是否开启kpm(仅对sukisu生效;可能轻微增加耗电，不需要可关闭)'
        required: true   
        type: choice
        default: 'false'
        options:
          - 'true'
          - 'false'
      bbr_enable:
        description: '"是否启用bbr算法(优化上行数据,对手机日用无太大意义甚至可能负优化;false关闭,true仅加入算法,default设为默认)"'
        required: true
        type: choice
        default: 'true'
        options:
          - 'false'
          - 'true'
          - 'default'
      scx_enable:
        description: '是否安装风驰内核驱动'
        required: true
        type: choice
        default: 'false'
        options:
          - 'true'
          - 'false'
      better_net:
        description: '是否开启网络功能增强优化配置(优化代理连接,IPV6等功能)'
        required: true
        type: choice
        default: 'true'
        options:
          - 'true'
          - 'false'
      ssg_rekernel_enable:
        description: '是否启用三星SSG IO调度器及Re-Kernel支持(默认true)'
        required: true
        type: choice
        default: 'true'
        options:
          - 'true'
          - 'false'
      kernel_suffix:
        description: '内核后缀(留空时触发随机后缀默认)'
        required: true
        type: string
        default: '11-o-g31602dff16cb'
      lz4_enable:
        description: '是否安装 lz4 1.10.0+zstd 1.5.7 补丁及 LZ4KD 补丁(0=均不安装,1=安装lz4&zstd补丁,2=安装lz4kd补丁,3=均安装,默认1)'
        required: true
        type: choice
        default: '1'
        options:
          - '0'
          - '1'
          - '2'
          - '3'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      ksuver: ${{ steps.ksu_version.outputs.ksuver }}
    steps:
      - name: 安装配置环境依赖
        run: |
          sudo apt-mark hold firefox libc-bin
          sudo apt purge -y man-db
          sudo rm -rf /var/lib/man-db/auto-update
          sudo apt update -y
          sudo apt-get install -y --no-install-recommends curl bison flex make binutils git perl gcc python3 python-is-python3 bc libssl-dev libelf-dev dwarves bc aria2 zip unzip ccache jq software-properties-common
          sudo add-apt-repository ppa:git-core/ppa -y
          sudo apt update -y
          sudo apt-get install -y git
          git --version
          echo "pahole 版本：$(pahole --version)"

      - name: 配置ccache目录
        run: |
          echo "CCACHE_DIR=$HOME/.ccache_6.1.118" >> $GITHUB_ENV
          echo "CCACHE_MAXSIZE=5G" >> $GITHUB_ENV
          df -h
          echo "当前构建内核版本：6.1.118"
          rm -rf kernel_platform

      - name: 载入当前版本内核的 ccache缓存
        uses: actions/cache@v3
        id: ccache-restore
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-new-6.1.118-${{ runner.os }}-main
          restore-keys: |
            ccache-new-6.1.118-${{ runner.os }}-
            ccache-new-6.1.118-
            ccache-new-

      - name: 初始化并配置ccache
        run: |
          # 设置ccache环境变量
          export CCACHE_COMPILERCHECK="%compiler% -dumpmachine; %compiler% -dumpversion"
          export CCACHE_NOHASHDIR="true"
          export CCACHE_HARDLINK="true"
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          export CCACHE_MAXSIZE="${{ env.CCACHE_MAXSIZE }}"
          
          # 确保ccache目录存在
          mkdir -p "$CCACHE_DIR"
          
          # 每次运行都重新配置缓存大小
          echo "配置ccache缓存大小为: $CCACHE_MAXSIZE"
          ccache -M "$CCACHE_MAXSIZE"
          ccache -o compression=true
          
          # 显示初始缓存状态
          echo "ccache初始状态:"
          ccache -s
          
          # 如果缓存恢复命中，显示详细信息
          if [ "${{ steps.ccache-restore.outputs.cache-hit }}" == 'true' ]; then
            echo "ccache缓存命中详情:"
            ccache -sv
          fi

      - name: 初始化源码仓库及llvm-Clang20工具链
        run: |
          cd kernel_workspace
          echo "正在克隆源码仓库..."
          aria2c -s16 -x16 -k1M https://github.com/cctv18/android_kernel_common_oneplus_sm8650/archive/refs/heads/oneplus/sm8650_v_15.0.0_oneplus12_6.1.118.zip -o common.zip && 
          unzip -q common.zip && 
          mv "android_kernel_common_oneplus_sm8650-oneplus-sm8650_v_15.0.0_oneplus12_6.1.118" common &&
          rm -rf common.zip &
          
          echo "正在克隆llvm-Clang20工具链..." &&
          mkdir -p clang20 &&
          aria2c -s16 -x16 -k1M https://github.com/cctv18/oneplus_sm8650_toolchain/releases/download/LLVM-Clang20-r547379/clang-r547379.zip -o clang.zip &&
          unzip -q clang.zip -d clang20 &&
          rm -rf clang.zip &
          
          echo "正在克隆构建工具..." &&
          aria2c -s16 -x16 -k1M https://github.com/cctv18/oneplus_sm8650_toolchain/releases/download/LLVM-Clang20-r547379/build-tools.zip -o build-tools.zip &&
          unzip -q build-tools.zip &&
          rm -rf build-tools.zip &
          
          wait
          echo "所有源码及llvm-Clang20工具链初始化完成！"
          echo "正在去除 ABI 保护 & 去除 dirty 后缀..."
          rm common/android/abi_gki_protected_exports_* || true
          for f in common/scripts/setlocalversion; do
            sed -i 's/ -dirty//g' "$f"
            sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' "$f"
          done

      - name: 添加KernelSU
        id: ksu_version
        run: |
          cd kernel_workspace
          if [[ ${{ github.event.inputs.ksu_type }} == "sukisu" ]]; then
            echo "配置SukiSU Ultra..."
            curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/refs/heads/main/kernel/setup.sh" | bash -s susfs-main
            cd ./KernelSU
            GIT_COMMIT_HASH=$(git rev-parse --short=8 HEAD)
            for i in {1..3}; do
              KSU_API_VERSION=$(curl -s "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/susfs-main/kernel/Makefile" | grep -m1 "KSU_VERSION_API :=" | awk -F'= ' '{print $2}' | tr -d '[:space:]')
              [ -n "$KSU_API_VERSION" ] && break || sleep 1
            done
            [ -z "$KSU_API_VERSION" ] && KSU_API_VERSION="3.1.7"
            echo "KSU_API_VERSION=$KSU_API_VERSION" >> $GITHUB_ENV
            VERSION_DEFINITIONS=$'define get_ksu_version_full\nv\\$1-'"$GIT_COMMIT_HASH"$'@1263599071\nendef\n\nKSU_VERSION_API := '"$KSU_API_VERSION"$'\nKSU_VERSION_FULL := v'"$KSU_API_VERSION"$'-'"$GIT_COMMIT_HASH"$'@1263599071'
            sed -i '/define get_ksu_version_full/,/endef/d' kernel/Makefile
            sed -i '/KSU_VERSION_API :=/d' kernel/Makefile
            sed -i '/KSU_VERSION_FULL :=/d' kernel/Makefile
            awk -v def="$VERSION_DEFINITIONS" '/REPO_OWNER :=/ {print; print def; inserted=1; next} 1; END {if (!inserted) print def}' kernel/Makefile > kernel/Makefile.tmp && mv kernel/Makefile.tmp kernel/Makefile
            KSU_VERSION=$(expr $(git rev-list --count main) + 10700 2>/dev/null || echo 114514)
            echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
            echo "ksuver=$KSU_VERSION" >> $GITHUB_OUTPUT
          else
            echo "配置KernelSU Next..."
            curl -LSs "https://raw.githubusercontent.com/pershoot/KernelSU-Next/next-susfs/kernel/setup.sh" | bash -s next-susfs
            cd KernelSU-Next
            KSU_VERSION=$(expr $(curl -sI "https://api.github.com/repos/pershoot/KernelSU-Next/commits?sha=next&per_page=1" | grep -i "link:" | sed -n 's/.*page=\([0-9]*\)>; rel="last".*/\1/p') "+" 10200)
            echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
            echo "ksuver=$KSU_VERSION" >> $GITHUB_OUTPUT
            sed -i "s/DKSU_VERSION=11998/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile
          fi

      - name: 应用 KernelSU & SUSFS 补丁
        run: |
          cd kernel_workspace
          if [[ ${{ github.event.inputs.ksu_type }} == "sukisu" ]]; then     
            git clone --depth=1 https://github.com/ShirkNeko/susfs4ksu.git -b gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}
            [ -d ./SukiSU_patch ] || git clone --depth=1 https://github.com/SukiSU-Ultra/SukiSU_patch.git
            cd common
            cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch .
            cp ../susfs4ksu/kernel_patches/fs/* ./fs/
            cp ../susfs4ksu/kernel_patches/include/linux/* ./include/linux/
            cp ../SukiSU_patch/hooks/syscall_hooks.patch .
            cp ../SukiSU_patch/69_hide_stuff.patch .            
            patch -p1 < 50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch
            patch -p1 < syscall_hooks.patch
            patch -p1 < 69_hide_stuff.patch
          else
            git clone --depth=1 https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}
            git clone --depth=1 https://github.com/WildKernels/kernel_patches.git
            cp ./susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch ./common/
            cp ./susfs4ksu/kernel_patches/fs/* ./common/fs/
            cp ./susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
            cp ./kernel_patches/next/scope_min_manual_hooks_v1.4.patch ./common/
            cp ./kernel_patches/69_hide_stuff.patch ./common/
            cd ./common
            patch -p1 < 50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch
            patch -p1 -N -F 3 < scope_min_manual_hooks_v1.4.patch
            patch -p1 -N -F 3 < 69_hide_stuff.patch
          fi      

      - name: 应用lz4 1.10.0 & zstd 1.5.7补丁
        run: |
          if [[ "${{ github.event.inputs.lz4_enable }}" == "1" || "${{ github.event.inputs.lz4_enable }}" == "3" ]]; then
            cd kernel_workspace
            git clone --depth=1 https://github.com/cctv18/oppo_oplus_realme_sm8650.git
            cp ./oppo_oplus_realme_sm8650/zram_patch/001-lz4.patch ./common/
            cp ./oppo_oplus_realme_sm8650/zram_patch/lz4armv8.S ./common/lib
            cp ./oppo_oplus_realme_sm8650/zram_patch/002-zstd.patch ./common/
            cd ./common
            git apply -p1 < 001-lz4.patch
            patch -p1 < 002-zstd.patch
          fi

      - name: 应用 lz4kd 补丁
        run: |
          if [[ "${{ github.event.inputs.lz4_enable }}" == "2" || "${{ github.event.inputs.lz4_enable }}" == "3" ]]; then
            cd kernel_workspace
            if [[ ${{ github.event.inputs.ksu_type }} == "ksunext" ]]; then
              [ -d ./SukiSU_patch ] || git clone --depth=1 https://github.com/SukiSU-Ultra/SukiSU_patch.git
            fi
            cd common
            cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./include/linux/
            cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./lib
            cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./crypto
            cp ../SukiSU_patch/other/zram/zram_patch/${{ env.KERNEL_VERSION }}/lz4kd.patch ./
            patch -p1 -F 3 < lz4kd.patch
          fi

      - name: 添加 KSU & SUSFS 配置项
        run: |
          cd kernel_workspace/common
          CONFIG_FILE=./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU=y" >> "$CONFIG_FILE"
          if [[ ${{ github.event.inputs.kpm_enable }} == 'true' && ${{ github.event.inputs.ksu_type }} == "sukisu" ]]; then
            echo "CONFIG_KPM=y" >> "$CONFIG_FILE"
          fi
          if [ "${{ github.event.inputs.hook_method }}" == "kprobes" ]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> "$CONFIG_FILE"
            echo "CONFIG_KPROBES=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_KPROBES_HOOK=y" >> "$CONFIG_FILE"
          else
            echo "CONFIG_KSU_MANUAL_HOOK=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
          fi
          echo "CONFIG_KSU_SUSFS=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=n" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP_NF_TARGET_TTL=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP6_NF_TARGET_HL=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP_ECN=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_ECN=y" >> "$CONFIG_FILE"
          echo "CONFIG_IPV6_ECN=y" >> "$CONFIG_FILE"
          echo "CONFIG_TMPFS_XATTR=y" >> "$CONFIG_FILE"
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> "$CONFIG_FILE"
          echo "CONFIG_DRM_MSM_DSI_165HZ=y" >> "$CONFIG_FILE"
          echo "CONFIG_QCOM_KGSL_165HZ_GPU_FREQ=y" >> "$CONFIG_FILE"
          echo "CONFIG_SCHED_CLASS_EXT=y" >> "$CONFIG_FILE"
          echo "CONFIG_BPF_JIT_ALWAYS_ON=y" >> "$CONFIG_FILE"
          echo "CONFIG_DEBUG_INFO_BTF=n" >> "$CONFIG_FILE"
          echo "CONFIG_ANDROID_NS_FS=y" >> "$CONFIG_FILE"
          echo "CONFIG_ANDROID_NS_FS_SECURITY=y" >> "$CONFIG_FILE"
          
          if [[ "${{ github.event.inputs.lz4_enable }}" == "2" || "${{ github.event.inputs.lz4_enable }}" == "3" ]]; then
            echo "CONFIG_ZSMALLOC=y" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_LZ4HC=y" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_LZ4K=y" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_LZ4KD=y" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_842=y" >> "$CONFIG_FILE"
            echo "CONFIG_F2FS_FS_COMPRESSION=y" >> "$CONFIG_FILE"
            echo "CONFIG_F2FS_FS_LZ4=y" >> "$CONFIG_FILE"
            echo "CONFIG_F2FS_FS_LZ4HC=y" >> "$CONFIG_FILE"
            echo "CONFIG_F2FS_FS_LZ4KD=y" >> "$CONFIG_FILE"
            echo "CONFIG_F2FS_FS_ZSTD=y" >> "$CONFIG_FILE"
          fi
          
          sed -i 's/check_defconfig//' ./build.config.gki

      - name: 启用网络功能增强优化配置
        if: ${{ github.event.inputs.better_net == 'true' }}
        run: |
          cd kernel_workspace/common
          CONFIG_FILE=./arch/arm64/configs/gki_defconfig
          echo "CONFIG_BPF_STREAM_PARSER=y" >> "$CONFIG_FILE"
          echo "CONFIG_NETFILTER_XT_MATCH_ADDRTYPE=y" >> "$CONFIG_FILE"
          echo "CONFIG_NETFILTER_XT_SET=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP_SET=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP_SET_MAX=65534" >> "$CONFIG_FILE"
          echo "CONFIG_IP_SET_BITMAP_IP=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP_SET_HASH_IP=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP6_NF_NAT=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP6_NF_TARGET_MASQUERADE=y" >> "$CONFIG_FILE"
          sed -i 's/CONFIG_CRYPTO_AES_ARM64_CE=.*/CONFIG_CRYPTO_AES_ARM64_CE=y/' "$CONFIG_FILE"
          sed -i 's/CONFIG_CRYPTO_SHA2_ARM64_CE=.*/CONFIG_CRYPTO_SHA2_ARM64_CE=y/' "$CONFIG_FILE"
          sed -i 's/CONFIG_CRYPTO_CHACHA20POLY1305=.*/CONFIG_CRYPTO_CHACHA20POLY1305=y/' "$CONFIG_FILE"
          wget https://github.com/cctv18/oppo_oplus_realme_sm8650/raw/refs/heads/main/other_patch/config.patch
          patch -p1 -F 3 < config.patch

      - name: 添加 BBR 拥塞控制算法
        if: ${{ github.event.inputs.bbr_enable == 'true' || github.event.inputs.bbr_enable == 'default' }}
        run: |
          cd kernel_workspace/common
          CONFIG_FILE=./arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_BBR=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_CUBIC=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_VEGAS=y" >> "$CONFIG_FILE"
          if [[ "${{ github.event.inputs.bbr_enable }}" == "default" ]]; then
            echo "CONFIG_DEFAULT_TCP_CONG=bbr" >> "$CONFIG_FILE"
          else
            echo "CONFIG_DEFAULT_TCP_CONG=cubic" >> "$CONFIG_FILE"
          fi

      - name: 启用三星SSG IO调度器 & Re-Kernel
        if: ${{ github.event.inputs.ssg_rekernel_enable == 'true' }}
        run: |
          cd kernel_workspace/common
          CONFIG_FILE=./arch/arm64/configs/gki_defconfig
          echo "CONFIG_MQ_IOSCHED_SSG=y" >> "$CONFIG_FILE"
          echo "CONFIG_MQ_IOSCHED_SSG_CGROUP=y" >> "$CONFIG_FILE"
          echo "CONFIG_REKERNEL=y" >> "$CONFIG_FILE"
          echo "CONFIG_SCHED_EEVDF=y" >> "$CONFIG_FILE"

      - name: Set Kernel Suffix
        run: |
          cd kernel_workspace/common
          SUFFIX_INPUT="${{ github.event.inputs.kernel_suffix }}"
          KANDROID_VERSION="${{ env.KANDROID_VERSION }}"  
          FAST_BUILD="true"  
          for path in ./scripts/setlocalversion; do
            [ -f "$path" ] || { echo "⚠️ $path 不存在，跳过"; continue; }
            sed -i 's/ -dirty//g' "$path"
            sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' "$path"
          done
          if [[ -n "$SUFFIX_INPUT" ]]; then
            echo "使用用户自定义后缀：$SUFFIX_INPUT"
            for path in ./scripts/setlocalversion; do
              [ -f "$path" ] || continue
              sed -i "s/^res=.*/res=\"-${KANDROID_VERSION}-${SUFFIX_INPUT}\"/" "$path"
              chmod +x "$path"
            done
          else
            echo "生成伪官方格式随机后缀..."
            RANDOM_DIGIT=$(od -An -N1 -tu1 < /dev/urandom | tr -d '[:space:]' | awk '{print $1 % 11}')
            RANDOM_HASH=$(od -An -N7 -tx1 /dev/urandom | tr -d ' \n')
            RANDOM_SUFFIX="${RANDOM_DIGIT}-o-g${RANDOM_HASH}"
            echo "生成随机后缀：$RANDOM_SUFFIX"
            for path in ./scripts/setlocalversion; do
              [ -f "$path" ] || continue
              sed -i "s/^res=.*/res=\"-${KANDROID_VERSION}-${RANDOM_SUFFIX}\"/" "$path"
              chmod +x "$path"
            done
            cd ../../
            git add -A
            git commit -m "Apply random official-like suffix: ${RANDOM_SUFFIX} (remove -dirty)"
          fi
          cat ./scripts/setlocalversion | grep -E 'res=|dirty'

      - name: 构建内核
        run: |
          WORKDIR="$(pwd)"
          export PATH="/usr/lib/ccache:$PATH"
          export PATH="$WORKDIR/kernel_workspace/clang20/bin:$PATH"
          export PATH="$WORKDIR/kernel_workspace/build-tools/bin:$PATH"

          CLANG_DIR="$WORKDIR/kernel_workspace/clang20/bin"
          echo "Clang版本: $($CLANG_DIR/clang --version | head -n 1)"
          echo "LLD版本: $($CLANG_DIR/ld.lld --version | head -n 1)"

          export CCACHE_COMPILERCHECK="%compiler% -dumpmachine; %compiler% -dumpversion"
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"

          cd kernel_workspace/common
          if [[ ${{ github.event.inputs.scx_enable }} == "true" ]]; then
            git clone --depth=1 https://github.com/cctv18/sched_ext.git
            cp -r ./sched_ext/* ./kernel/sched
            rm -rf ./sched_ext
          fi

          sudo rm -rf /usr/share/dotnet /usr/local/lib/android &
          wait

          make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC="ccache clang" LD=ld.lld HOSTLD=ld.lld O=out KCFLAGS+=-O2 KCFLAGS+=-Wno-error gki_defconfig all
          echo "内核编译完成！"
          ccache -s
          df -h

      - name: 应用KPM并修补内核
        if: ${{ github.event.inputs.kpm_enable == 'true' && github.event.inputs.ksu_type == 'sukisu' }}
        run: |
          cd kernel_workspace/common/out/arch/arm64/boot
          curl -LO https://github.com/ShirkNeko/SukiSU_KernelPatch_patch/releases/download/0.12.0/patch_linux
          chmod +x patch_linux
          ./patch_linux
          rm -f Image
          mv oImage Image

      - name: 克隆 AnyKernel3 并打包ZRAM-Module
        run: |
          set -e
          cd kernel_workspace
          git clone --depth=1 https://github.com/xx2901318208/AnyKernel3
          rm -rf ./AnyKernel3/.git
          cd AnyKernel3

          cp ../common/out/arch/arm64/boot/Image ./Image
          if [[ ! -f ./Image ]]; then
            echo "❌ 未找到内核镜像，构建失败"
            exit 1
          fi

          if [[ "${{ github.event.inputs.lz4_enable }}" == "2" || "${{ github.event.inputs.lz4_enable }}" == "3" ]]; then
            git clone --depth=1 https://github.com/FurLC/ZRAM-Module.git ../ZRAM-Module
            mkdir -p ./system/etc/init ./system/bin ./system/etc
            cp ../ZRAM-Module/system/etc/init/zram-init.rc ./system/etc/init/
            cp ../ZRAM-Module/system/bin/zram-control.sh ./system/bin/
            cp ../ZRAM-Module/system/etc/zram.conf ./system/etc/
            cp ../ZRAM-Module/README.md ./ZRAM-Module-README.md
            
            chmod 755 ./system/bin/zram-control.sh
            chmod 644 ./system/etc/init/zram-init.rc
            chmod 644 ./system/etc/zram.conf

            sed -i 's/^COMP_ALG=.*/COMP_ALG=lz4kd/' ./system/etc/zram.conf
            sed -i 's/^ZRAM_SIZE=.*/ZRAM_SIZE=8G/' ./system/etc/zram.conf
            
            rm -rf ../ZRAM-Module
          fi

          KSU_TYPENAME=$([[ ${{ github.event.inputs.ksu_type }} == "sukisu" ]] && echo "SukiSU" || echo "KSUNext")
          echo "KSU_TYPENAME=$KSU_TYPENAME" >> $GITHUB_ENV
          FINAL_SUFFIX=$([[ -n "${{ github.event.inputs.kernel_suffix }}" ]] && echo "${{ github.event.inputs.kernel_suffix }}" || echo "${{ env.KERNEL_NAME }}")
          zip -r ../AnyKernel3_${KSU_TYPENAME}_${{ env.KSUVER }}_${{ env.FEIL }}_${FINAL_SUFFIX}.zip ./*
          
      - name: 上传 ZIP 工件
        uses: actions/upload-artifact@v4
        with:
          name: Kernel_ZIP_Artifacts
          path: ${{ github.workspace }}/kernel_workspace/AnyKernel3_*.zip            

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      actions: read
    steps:
      - name: 下载 ZIP 工件
        uses: actions/download-artifact@v4
        with:
          name: Kernel_ZIP_Artifacts
          path: ./release_zips

      - name: 设置环境变量
        run: |
          FINAL_SUFFIX=$([[ -n "${{ github.event.inputs.kernel_suffix }}" ]] && echo "${{ github.event.inputs.kernel_suffix }}" || echo "${{ env.KERNEL_NAME }}")
          FULL_VERSION="${{ env.KERNEL_VERSION }}.118-${FINAL_SUFFIX}"
          echo "FULL_VERSION=$FULL_VERSION" >> $GITHUB_ENV
          TIME="$(TZ='Asia/Shanghai' date +'%y%m%d%H%M%S')"
          TIME_FORM="$(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')"
          echo "TIME=$TIME" >> $GITHUB_ENV
          echo "TIME_FORM=$TIME_FORM" >> $GITHUB_ENV
          TAG_HEAD="OPPO+OPlus+Realme-A15-build"
          echo "TAG_HEAD=$TAG_HEAD" >> $GITHUB_ENV
          KSU_BRANCH=$([[ ${{ github.event.inputs.ksu_type }} == "sukisu" ]] && echo "SukiSU Ultra" || echo "KernelSU Next")
          echo "KSU_BRANCH=$KSU_BRANCH" >> $GITHUB_ENV
          echo "ssg_enable=${{ github.event.inputs.ssg_rekernel_enable }}" >> $GITHUB_ENV
          echo "rekernel_enable=${{ github.event.inputs.ssg_rekernel_enable }}" >> $GITHUB_ENV
          
          if [[ "${{ github.event.inputs.lz4_enable }}" == "2" || "${{ github.event.inputs.lz4_enable }}" == "3" ]]; then
            lz4kd_status="✅ 已启用"
            zram_module_status="✅ 已集成 ZRAM-Module（lz4kd 适配）"
          else
            lz4kd_status="❌ 已关闭"
            zram_module_status="❌ 未集成（仅启用基础 zram 压缩算法）"
          fi
          if [[ "${{ github.event.inputs.lz4_enable }}" == "1" || "${{ github.event.inputs.lz4_enable }}" == "3" ]]; then
            lz4_zstd_status="✅ 已启用"
          else
            lz4_zstd_status="❌ 已关闭"
          fi
          echo "lz4kd_status=$lz4kd_status" >> $GITHUB_ENV
          echo "lz4_zstd_status=$lz4_zstd_status" >> $GITHUB_ENV
          echo "zram_module_status=$zram_module_status" >> $GITHUB_ENV

      - name: 创建发布
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "${{ env.TAG_HEAD }}-${{ env.TIME }}"
          name: "${{ env.TAG_HEAD }}-${{ env.FULL_VERSION }}"
          body: |
            ## 构建信息
            - 构建时间：${{ env.TIME_FORM }}
            - 内核版本：${{ env.FULL_VERSION }}
            - KernelSU 分支：${{ env.KSU_BRANCH }}
            - KSU 版本号：${{ needs.build.outputs.ksuver }}
            - 风驰驱动：${{ github.event.inputs.scx_enable }}
            - 三星SSG IO调度器：${{ env.ssg_enable }}
            - Re-Kernel 支持：${{ env.rekernel_enable }}
            - 网络优化：${{ github.event.inputs.better_net }}
            - BBR 算法：${{ github.event.inputs.bbr_enable }}
            - **zram 优化**：lz4-1.10.0+zstd-1.5.7（${{ env.lz4_zstd_status }}） | LZ4KD高性能驱动（${{ env.lz4kd_status }}）
            - **zram 模块**：${{ env.zram_module_status }}
            - **内核后缀**：${{ github.event.inputs.kernel_suffix || '伪官方随机后缀（如X-o-gXXXXXXX）' }}
            
            ### ⚠️ 重要提示
            1. 启用 LZ4KD 驱动时，已自动集成 FurLC/ZRAM-Module：
               - 开机自动加载 zram（配置文件：/system/etc/zram.conf）
               - 手动控制脚本：/system/bin/zram-control.sh（支持 start/stop/restart 命令）
               - 压缩算法已默认设置为 lz4kd，如需调整参数可修改 /system/etc/zram.conf
            2. 刷写前请用 KernelFlasher 备份 boot 分区，防止变砖
            3. FurLC/ZRAM-Module 项目地址：[https://github.com/FurLC/ZRAM-Module](https://github.com/FurLC/ZRAM-Module)
          draft: false
          prerelease: false
          files: release_zips/AnyKernel3_*.zip
